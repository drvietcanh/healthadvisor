"""
Enhanced Chatbot - H·ªó tr·ª£ c·∫£ OpenAI v√† Gemini API
"""
import streamlit as st
from typing import List, Dict, Optional
import os

# Import AI libraries
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False


class MedicalChatbot:
    """Chatbot y t·∫ø th√¥ng minh v·ªõi c√¢u h·ªèi g·ª£i √Ω"""
    
    def __init__(self):
        self.conversation = []
        
    def get_welcome_message(self) -> str:
        """L·ªùi ch√†o v√† gi·ªõi thi·ªáu"""
        return """
üëã **Xin ch√†o! T√¥i l√† B√°c sƒ© AI - Tr·ª£ l√Ω s·ª©c kh·ªèe c·ªßa b·∫°n.**

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
- ‚úÖ Gi·∫£i th√≠ch v·ªÅ b·ªánh (huy·∫øt √°p, ti·ªÉu ƒë∆∞·ªùng, ƒë·ªôt qu·ªµ...)
- ‚úÖ T∆∞ v·∫•n ch·∫ø ƒë·ªô ƒÉn u·ªëng
- ‚úÖ H∆∞·ªõng d·∫´n d√πng thu·ªëc (kh√¥ng k√™ ƒë∆°n)
- ‚úÖ Tr·∫£ l·ªùi th·∫Øc m·∫Øc v·ªÅ tri·ªáu ch·ª©ng

**B·∫°n mu·ªën h·ªèi g√¨? Ch·ªçn b√™n d∆∞·ªõi ho·∫∑c g√µ c√¢u h·ªèi nh√©!** üòä
"""
    
    def get_suggested_questions(self, context: str = "general") -> List[str]:
        """C√¢u h·ªèi g·ª£i √Ω theo ng·ªØ c·∫£nh"""
        
        suggestions = {
            "general": [
                "Huy·∫øt √°p bao nhi√™u l√† b√¨nh th∆∞·ªùng?",
                "D·∫•u hi·ªáu ƒë·ªôt qu·ªµ l√† g√¨?",
                "ƒê∆∞·ªùng huy·∫øt cao ph·∫£i l√†m sao?",
                "ƒÇn g√¨ ƒë·ªÉ gi·∫£m huy·∫øt √°p?",
                "Khi n√†o c·∫ßn g·ªçi c·∫•p c·ª©u 115?"
            ],
            "hypertension": [
                "Thu·ªëc huy·∫øt √°p c√≥ t√°c d·ª•ng ph·ª• g√¨?",
                "ƒÇn bao nhi√™u mu·ªëi m·ªói ng√†y?",
                "C√≥ ƒë∆∞·ª£c b·ªè thu·ªëc khi huy·∫øt √°p ƒë√£ b√¨nh th∆∞·ªùng?",
                "V·∫≠n ƒë·ªông th·∫ø n√†o an to√†n?",
                "ƒêo huy·∫øt √°p ƒë√∫ng c√°ch ra sao?"
            ],
            "diabetes": [
                "ƒê∆∞·ªùng huy·∫øt 7.5 mmol/L c√≥ cao kh√¥ng?",
                "Insulin ti√™m v√†o ƒë√¢u?",
                "H·∫° ƒë∆∞·ªùng huy·∫øt x·ª≠ tr√≠ th·∫ø n√†o?",
                "ƒÇn carb l√† ƒÉn g√¨?",
                "C√≥ c·∫ßn ki√™ng tr√°i c√¢y kh√¥ng?"
            ],
            "stroke": [
                "BE-FAST l√† g√¨?",
                "ƒê·ªôt qu·ªµ ph·∫£i l√†m g√¨ ngay?",
                "Ph√≤ng ng·ª´a ƒë·ªôt qu·ªµ nh∆∞ th·∫ø n√†o?",
                "Th·ªùi gian v√†ng l√† bao l√¢u?",
                "ƒê·ªôt qu·ªµ c√≥ kh·ªèi h·∫≥n kh√¥ng?"
            ],
            "nutrition": [
                "Th·ª±c ƒë∆°n cho ng∆∞·ªùi huy·∫øt √°p cao?",
                "M√≥n n√†o √≠t mu·ªëi?",
                "C√°ch t√≠nh carb trong b·ªØa ƒÉn?",
                "ƒÇn g√¨ t·ªët cho tim?",
                "Tr√°i c√¢y n√†o t·ªët cho ti·ªÉu ƒë∆∞·ªùng?"
            ],
            "medication": [
                "Thu·ªëc u·ªëng l√∫c n√†o?",
                "Qu√™n u·ªëng thu·ªëc th√¨ sao?",
                "T√°c d·ª•ng ph·ª• thu·ªëc l√† g√¨?",
                "C√≥ ƒë∆∞·ª£c u·ªëng thu·ªëc c√πng l√∫c?",
                "Khi n√†o b√°o b√°c sƒ© v·ªÅ thu·ªëc?"
            ]
        }
        
        return suggestions.get(context, suggestions["general"])
    
    def detect_context(self, message: str) -> str:
        """Ph√°t hi·ªán ng·ªØ c·∫£nh t·ª´ c√¢u h·ªèi"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["huy·∫øt √°p", "cao huy·∫øt √°p", "tƒÉng huy·∫øt √°p", "blood pressure"]):
            return "hypertension"
        elif any(word in message_lower for word in ["ti·ªÉu ƒë∆∞·ªùng", "ƒë∆∞·ªùng huy·∫øt", "insulin", "diabetes"]):
            return "diabetes"
        elif any(word in message_lower for word in ["ƒë·ªôt qu·ªµ", "stroke", "be-fast", "li·ªát"]):
            return "stroke"
        elif any(word in message_lower for word in ["ƒÉn", "th·ª©c ƒÉn", "m√≥n", "th·ª±c ƒë∆°n", "dinh d∆∞·ª°ng"]):
            return "nutrition"
        elif any(word in message_lower for word in ["thu·ªëc", "u·ªëng thu·ªëc", "li·ªÅu", "medication"]):
            return "medication"
        else:
            return "general"
    
    def get_quick_answers(self, question_type: str) -> str:
        """C√¢u tr·∫£ l·ªùi nhanh cho c√¢u h·ªèi ph·ªï bi·∫øn"""
        
        answers = {
            "huy·∫øt √°p b√¨nh th∆∞·ªùng": """
üìä **Huy·∫øt √°p b√¨nh th∆∞·ªùng:**

**< 120/80 mmHg** = ‚úÖ B√¨nh th∆∞·ªùng tuy·ªát v·ªùi!
**120-129/<80** = ‚ö†Ô∏è H∆°i cao (c·∫ßn thay ƒë·ªïi l·ªëi s·ªëng)
**130-139/80-89** = üî¥ TƒÉng huy·∫øt √°p ƒë·ªô 1
**‚â• 140/90** = üö® TƒÉng huy·∫øt √°p ƒë·ªô 2

**V√≠ d·ª• d·ªÖ hi·ªÉu:**
- 115/75 = Ho√†n h·∫£o! üéâ
- 125/78 = OK nh∆∞ng c·∫©n th·∫≠n
- 145/95 = C·∫ßn ƒëi·ªÅu tr·ªã
""",
            "d·∫•u hi·ªáu ƒë·ªôt qu·ªµ": """
üö® **D·∫•u hi·ªáu ƒë·ªôt qu·ªµ - Nh·ªõ BE-FAST:**

**B** = **B**alance - M·∫•t thƒÉng b·∫±ng
**E** = **E**yes - Nh√¨n m·ªù, nh√¨n ƒë√¥i  
**F** = **F**ace - X·ªá m·∫∑t, m√©o mi·ªáng
**A** = **A**rm - Y·∫øu tay/ch√¢n (1 b√™n)
**S** = **S**peech - N√≥i kh√≥, n√≥i l·∫Øp
**T** = **T**ime - G·ªåI 115 NGAY!

**Test nhanh 10 gi√¢y:**
1. C∆Ø·ªúI ‚Üí L·ªách mi·ªáng? ‚ùå
2. GI∆† 2 TAY ‚Üí 1 tay sa? ‚ùå
3. N√ìI 1 C√ÇU ‚Üí Kh√≥ n√≥i? ‚ùå

‚Üí C√ì 1 d·∫•u hi·ªáu = G·ªåI 115 NGAY!
‚è∞ M·ªói ph√∫t = 2 tri·ªáu t·∫ø b√†o n√£o ch·∫øt!
""",
            "ƒë∆∞·ªùng cao": """
üç¨ **ƒê∆∞·ªùng huy·∫øt cao - L√†m g√¨ ngay:**

**N·∫øu > 13 mmol/L (>250 mg/dL):**
1. ‚úÖ U·ªëng nhi·ªÅu n∆∞·ªõc
2. ‚úÖ ƒêo ti·∫øp sau 2 gi·ªù
3. ‚ö†Ô∏è N·∫øu v·∫´n cao ‚Üí G·ªçi b√°c sƒ©
4. üö® N·∫øu bu·ªìn n√¥n, ƒëau b·ª•ng ‚Üí G·ªåI 115

**N·∫øu 7-13 mmol/L (126-250):**
1. ‚úÖ V·∫≠n ƒë·ªông nh·∫π 15 ph√∫t
2. ‚úÖ ƒÇn √≠t carb b·ªØa sau
3. ‚úÖ U·ªëng thu·ªëc ƒë√∫ng gi·ªù
4. üìù Ghi l·∫°i ƒë·ªÉ b√°o b√°c sƒ©

**Ph√≤ng ng·ª´a:**
- ƒÇn ƒë√∫ng gi·ªù
- ƒêo ƒë∆∞·ªùng th∆∞·ªùng xuy√™n
- U·ªëng thu·ªëc ƒë·ªß li·ªÅu
""",
            "ƒÉn gi·∫£m huy·∫øt √°p": """
ü•ó **ƒÇn g√¨ ƒë·ªÉ gi·∫£m huy·∫øt √°p:**

**‚úÖ N√äN ƒÇN:**
- ü•¨ Rau xanh (c·∫£i, rau ng√≥t, rau mu·ªëng)
- üçå Chu·ªëi (gi√†u kali - h·∫° huy·∫øt √°p)
- ü•õ S·ªØa √≠t b√©o
- üêü C√° (omega-3 r·∫•t t·ªët)
- ü•î Khoai lang lu·ªôc
- üçä Cam, qu√Ωt (vitamin C)

**üö´ TR√ÅNH:**
- ƒê·ªì M·∫∂N (mu·ªëi, m·∫Øm, t∆∞∆°ng)
- ƒê·ªì CHI√äN R√ÅN
- ƒê·ªì H·ªòP/ƒê√ìNG G√ìI
- R∆∞·ª£u, bia

**M·∫πo:**
Thay mu·ªëi = Chanh + G·ª´ng + T·ªèi + Rau th∆°m
‚Üí V·ª´a ngon v·ª´a kh·ªèe!
""",
            "g·ªçi 115": """
üö® **Khi n√†o G·ªåI C·∫§P C·ª®U 115:**

**TIM M·∫†CH:**
‚õî ƒêau ng·ª±c d·ªØ d·ªôi
‚õî Kh√≥ th·ªü nghi√™m tr·ªçng
‚õî Huy·∫øt √°p > 180/120

**TH·∫¶N KINH:**
‚õî Y·∫øu li·ªát ƒë·ªôt ng·ªôt
‚õî M√©o m·∫∑t, n√≥i kh√≥
‚õî ƒêau ƒë·∫ßu d·ªØ d·ªôi

**TI·ªÇU ƒê∆Ø·ªúNG:**
‚õî ƒê∆∞·ªùng > 22 mmol/L (400 mg/dL)
‚õî H√¥n m√™, co gi·∫≠t
‚õî Bu·ªìn n√¥n nhi·ªÅu + ƒëau b·ª•ng

**KH√ÅC:**
‚õî Ng·∫•t x·ªâu
‚õî Ch·∫£y m√°u kh√¥ng c·∫ßm ƒë∆∞·ª£c
‚õî B·∫•t k·ª≥ t√¨nh tr·∫°ng NGHI√äM TR·ªåNG ƒë·ªôt ng·ªôt

**‚è∞ ƒê·ª™NG TR√å HO√ÉN - G·ªçi ngay!**
T·ªët h∆°n G·ªåI NH·∫¶M c√≤n h∆°n B·ªé L·ª†!
"""
        }
        
        return answers.get(question_type, "")
    
    def generate_response(self, user_message: str, use_ai: bool = True, provider: str = "gemini", api_key: Optional[str] = None) -> tuple:
        """
        T·∫°o ph·∫£n h·ªìi cho c√¢u h·ªèi
        
        Args:
            user_message: C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
            use_ai: C√≥ d√πng AI kh√¥ng
            provider: "gemini" ho·∫∑c "openai"
            api_key: API key (optional)
            
        Returns: (response_text, new_context, suggested_questions)
        """
        
        # Ph√°t hi·ªán ng·ªØ c·∫£nh
        context = self.detect_context(user_message)
        
        # Ki·ªÉm tra c√¢u h·ªèi ph·ªï bi·∫øn
        user_lower = user_message.lower()
        
        quick_answer_map = {
            "huy·∫øt √°p b√¨nh th∆∞·ªùng": ["huy·∫øt √°p", "b√¨nh th∆∞·ªùng"],
            "d·∫•u hi·ªáu ƒë·ªôt qu·ªµ": ["d·∫•u hi·ªáu", "ƒë·ªôt qu·ªµ"],
            "ƒë∆∞·ªùng cao": ["ƒë∆∞·ªùng", "cao"],
            "ƒÉn gi·∫£m huy·∫øt √°p": ["ƒÉn", "gi·∫£m", "huy·∫øt √°p"],
            "g·ªçi 115": ["g·ªçi", "115", "c·∫•p c·ª©u"]
        }
        
        # T√¨m c√¢u tr·∫£ l·ªùi nhanh
        for answer_key, keywords in quick_answer_map.items():
            if all(kw in user_lower for kw in keywords):
                response = self.get_quick_answers(answer_key)
                if response:
                    suggestions = self.get_suggested_questions(context)
                    return response, context, suggestions
        
        # N·∫øu kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi nhanh, d√πng AI ho·∫∑c template
        if use_ai:
            response = self._get_ai_response(user_message, context, provider=provider, api_key=api_key)
        else:
            response = self._get_template_response(user_message, context)
        
        suggestions = self.get_suggested_questions(context)
        return response, context, suggestions
    
    def _get_ai_response(self, message: str, context: str, provider: str = "gemini", api_key: Optional[str] = None) -> str:
        """
        G·ªçi AI (OpenAI ho·∫∑c Gemini) ƒë·ªÉ tr·∫£ l·ªùi
        
        Args:
            message: C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
            context: Ng·ªØ c·∫£nh (hypertension, diabetes, stroke, general)
            provider: "openai" ho·∫∑c "gemini"
            api_key: API key (n·∫øu kh√¥ng c√≥ s·∫Ω l·∫•y t·ª´ env/secrets)
        """
        # System prompts theo context
        system_prompts = {
            "hypertension": "B·∫°n l√† chuy√™n gia tƒÉng huy·∫øt √°p. Gi·∫£i th√≠ch ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát. Lu√¥n nh·∫Øc g·ªçi 115 n·∫øu nguy hi·ªÉm.",
            "diabetes": "B·∫°n l√† chuy√™n gia ti·ªÉu ƒë∆∞·ªùng. Gi·∫£i th√≠ch v·ªÅ ƒë∆∞·ªùng huy·∫øt b·∫±ng c·∫£ mmol/L v√† mg/dL. Ng√¥n ng·ªØ d·ªÖ hi·ªÉu, ti·∫øng Vi·ªát.",
            "stroke": "B·∫°n l√† chuy√™n gia ƒë·ªôt qu·ªµ. Nh·∫•n m·∫°nh BE-FAST v√† th·ªùi gian v√†ng. Lu√¥n nh·∫Øc G·ªåI 115 NGAY. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.",
            "general": "B·∫°n l√† b√°c sƒ© gia ƒë√¨nh th√¢n thi·ªán. Gi·∫£i th√≠ch y khoa b·∫±ng ng√¥n ng·ªØ ƒë·ªùi th∆∞·ªùng, d·ªÖ hi·ªÉu. An to√†n l√† tr√™n h·∫øt. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."
        }
        
        system_prompt = system_prompts.get(context, system_prompts["general"])
        system_prompt += "\n\nQUY T·∫ÆC: Kh√¥ng ch·∫©n ƒëo√°n, kh√¥ng k√™ ƒë∆°n. Ch·ªâ gi√°o d·ª•c v√† t∆∞ v·∫•n chung. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu."
        
        # Th·ª≠ Gemini tr∆∞·ªõc (mi·ªÖn ph√≠!)
        if provider == "gemini":
            try:
                if not GEMINI_AVAILABLE:
                    raise ImportError("google-generativeai not installed")
                
                # L·∫•y API key t·ª´ parameter ho·∫∑c env/secrets
                gemini_key = api_key or os.getenv("GEMINI_API_KEY") or st.secrets.get("GEMINI_API_KEY")
                
                if not gemini_key:
                    return "‚ö†Ô∏è Ch∆∞a c√≥ Gemini API key. Vui l√≤ng nh·∫≠p API key ·ªü sidebar!"
                
                genai.configure(api_key=gemini_key)
                model = genai.GenerativeModel('gemini-pro')
                
                # K·∫øt h·ª£p system prompt + user message
                full_prompt = f"{system_prompt}\n\nC√¢u h·ªèi: {message}"
                
                response = model.generate_content(full_prompt)
                return response.text
                
            except Exception as e:
                return f"‚ùå L·ªói Gemini: {str(e)}\n\nVui l√≤ng ki·ªÉm tra API key ho·∫∑c chuy·ªÉn sang OpenAI."
        
        # Th·ª≠ OpenAI
        elif provider == "openai":
            try:
                if not OPENAI_AVAILABLE:
                    raise ImportError("openai not installed")
                
                # L·∫•y API key
                openai_key = api_key or os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY")
                
                if not openai_key:
                    return "‚ö†Ô∏è Ch∆∞a c√≥ OpenAI API key. Vui l√≤ng nh·∫≠p API key ·ªü sidebar!"
                
                client = openai.OpenAI(api_key=openai_key)
                response = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": message}
                    ],
                    temperature=0.7,
                    max_tokens=500
                )
                
                return response.choices[0].message.content
                
            except Exception as e:
                return f"‚ùå L·ªói OpenAI: {str(e)}\n\nVui l√≤ng ki·ªÉm tra API key."
        
        else:
            return self._get_template_response(message, context)
    
    def _get_template_response(self, message: str, context: str) -> str:
        """Tr·∫£ l·ªùi m·∫´u khi kh√¥ng c√≥ AI"""
        
        responses = {
            "hypertension": """
C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi v·ªÅ huy·∫øt √°p! üíì

ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c, t√¥i c·∫ßn bi·∫øt th√™m:
- Huy·∫øt √°p c·ªßa b·∫°n l√† bao nhi√™u?
- C√≥ tri·ªáu ch·ª©ng g√¨ kh√¥ng?
- ƒêang d√πng thu·ªëc g√¨?

Ho·∫∑c b·∫°n c√≥ th·ªÉ:
- Xem trang **Tim M·∫°ch** ƒë·ªÉ t√¨m hi·ªÉu chi ti·∫øt
- D√πng **C√¥ng c·ª• ƒë√°nh gi√° huy·∫øt √°p**
- ƒê·ªçc ph·∫ßn **H·ªçc D·ªÖ** v·ªÅ huy·∫øt √°p
""",
            "diabetes": """
C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi v·ªÅ ti·ªÉu ƒë∆∞·ªùng! ü©∏

ƒê·ªÉ gi√∫p b·∫°n t·ªët h∆°n, cho t√¥i bi·∫øt:
- ƒê∆∞·ªùng huy·∫øt c·ªßa b·∫°n l√† bao nhi√™u? (mmol/L ho·∫∑c mg/dL)
- C√≥ tri·ªáu ch·ª©ng g√¨ kh√¥ng?
- ƒê√£ kh√°m b√°c sƒ© ch∆∞a?

Ho·∫∑c b·∫°n c√≥ th·ªÉ:
- Xem trang **Ti·ªÉu ƒê∆∞·ªùng** 
- D√πng **C√¥ng c·ª• chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng huy·∫øt**
- ƒê·ªçc ph·∫ßn **H·ªçc D·ªÖ** v·ªÅ ti·ªÉu ƒë∆∞·ªùng
""",
            "stroke": """
‚ö†Ô∏è V·ªÅ ƒë·ªôt qu·ªµ - Th√¥ng tin QUAN TR·ªåNG:

**D·∫•u hi·ªáu BE-FAST:**
- M·∫•t thƒÉng b·∫±ng
- Nh√¨n m·ªù
- X·ªá m·∫∑t
- Y·∫øu tay ch√¢n
- N√≥i kh√≥

‚Üí **B·∫§T K·ª≤ d·∫•u hi·ªáu n√†o: G·ªåI 115 NGAY!**

B·∫°n mu·ªën h·ªèi v·ªÅ:
- Ph√≤ng ng·ª´a ƒë·ªôt qu·ªµ?
- ChƒÉm s√≥c sau ƒë·ªôt qu·ªµ?
- Y·∫øu t·ªë nguy c∆°?
""",
            "general": """
C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! üòä

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:
- ‚ù§Ô∏è Tim m·∫°ch (huy·∫øt √°p, suy tim...)
- ü©∏ Ti·ªÉu ƒë∆∞·ªùng (ƒë∆∞·ªùng huy·∫øt, insulin...)
- üß† Th·∫ßn kinh (ƒë·ªôt qu·ªµ, ƒë·ªông kinh...)
- üçΩÔ∏è Dinh d∆∞·ª°ng (ƒÉn u·ªëng l√†nh m·∫°nh)

B·∫°n quan t√¢m v·ªÅ ch·ªß ƒë·ªÅ n√†o? Ho·∫∑c ch·ªçn c√¢u h·ªèi g·ª£i √Ω b√™n d∆∞·ªõi nh√©!
"""
        }
        
        return responses.get(context, responses["general"])

