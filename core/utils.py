"""
C√°c h√†m ti·ªán √≠ch chung
"""
from datetime import datetime
from typing import Tuple


def convert_blood_sugar(value: float, from_unit: str = "mmol") -> Tuple[float, float]:
    """
    Chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng huy·∫øt gi·ªØa mmol/L v√† mg/dL
    
    Args:
        value: Gi√° tr·ªã ƒë∆∞·ªùng huy·∫øt
        from_unit: "mmol" ho·∫∑c "mg"
    
    Returns:
        (gi√° tr·ªã mmol/L, gi√° tr·ªã mg/dL)
    """
    if from_unit == "mmol":
        mmol_value = value
        mg_value = value * 18
    else:  # mg/dL
        mg_value = value
        mmol_value = value / 18
    
    return round(mmol_value, 1), round(mg_value, 0)


def classify_blood_pressure(systolic: int, diastolic: int) -> dict:
    """Ph√¢n lo·∫°i huy·∫øt √°p"""
    if systolic >= 180 or diastolic >= 120:
        return {
            "level": "crisis",
            "name_vn": "C∆†N T√ÅN HUY·∫æT √ÅP",
            "color": "red",
            "action_vn": "üö® G·ªåI 115 NGAY!"
        }
    elif systolic >= 140 or diastolic >= 90:
        return {
            "level": "stage2",
            "name_vn": "TƒÉng huy·∫øt √°p giai ƒëo·∫°n 2",
            "color": "orange",
            "action_vn": "‚ö†Ô∏è Kh√°m b√°c sƒ© trong tu·∫ßn n√†y"
        }
    elif systolic >= 130 or diastolic >= 80:
        return {
            "level": "stage1",
            "name_vn": "TƒÉng huy·∫øt √°p giai ƒëo·∫°n 1",
            "color": "yellow",
            "action_vn": "üìã T√°i kh√°m sau 1 th√°ng"
        }
    elif systolic >= 120 and diastolic < 80:
        return {
            "level": "elevated",
            "name_vn": "Huy·∫øt √°p cao b√¨nh th∆∞·ªùng",
            "color": "yellow",
            "action_vn": "üí° Thay ƒë·ªïi l·ªëi s·ªëng"
        }
    else:
        return {
            "level": "normal",
            "name_vn": "B√¨nh th∆∞·ªùng",
            "color": "green",
            "action_vn": "‚úÖ Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh"
        }


def calculate_bmi(weight_kg: float, height_cm: float) -> dict:
    """T√≠nh BMI v√† ph√¢n lo·∫°i"""
    height_m = height_cm / 100
    bmi = weight_kg / (height_m ** 2)
    
    # Ti√™u chu·∫©n ch√¢u √Å
    if bmi < 18.5:
        category = "Thi·∫øu c√¢n"
        color = "blue"
        risk = "TƒÉng nguy c∆° suy dinh d∆∞·ª°ng"
    elif bmi < 23:
        category = "B√¨nh th∆∞·ªùng"
        color = "green"
        risk = "Nguy c∆° th·∫•p"
    elif bmi < 25:
        category = "Th·ª´a c√¢n"
        color = "yellow"
        risk = "Nguy c∆° v·ª´a"
    elif bmi < 30:
        category = "B√©o ph√¨ ƒë·ªô 1"
        color = "orange"
        risk = "Nguy c∆° cao"
    else:
        category = "B√©o ph√¨ ƒë·ªô 2"
        color = "red"
        risk = "Nguy c∆° r·∫•t cao"
    
    return {
        "bmi": round(bmi, 1),
        "category_vn": category,
        "color": color,
        "risk_vn": risk
    }


def format_time_ago(hours: float) -> str:
    """Format th·ªùi gian ƒë√£ qua sang ti·∫øng Vi·ªát"""
    if hours < 1:
        minutes = int(hours * 60)
        return f"{minutes} ph√∫t tr∆∞·ªõc"
    elif hours < 24:
        return f"{int(hours)} gi·ªù tr∆∞·ªõc"
    else:
        days = int(hours / 24)
        remaining_hours = int(hours % 24)
        if remaining_hours > 0:
            return f"{days} ng√†y {remaining_hours} gi·ªù tr∆∞·ªõc"
        return f"{days} ng√†y tr∆∞·ªõc"


def get_greeting() -> str:
    """L·∫•y l·ªùi ch√†o theo th·ªùi gian"""
    hour = datetime.now().hour
    if hour < 12:
        return "Ch√†o bu·ªïi s√°ng"
    elif hour < 18:
        return "Ch√†o bu·ªïi chi·ªÅu"
    else:
        return "Ch√†o bu·ªïi t·ªëi"

