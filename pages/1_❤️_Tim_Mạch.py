"""
Trang t∆∞ v·∫•n v·ªÅ b·ªánh Tim M·∫°ch
"""
import streamlit as st
import sys
sys.path.append('..')

from diseases.cardiovascular import hypertension, heart_failure
from diseases.metabolic import dyslipidemia
from core.utils import classify_blood_pressure
from core.ui_config import get_custom_css

st.set_page_config(page_title="Tim M·∫°ch", page_icon="‚ù§Ô∏è", layout="wide")

# √Åp d·ª•ng Dark Mode
if 'dark_mode' not in st.session_state:
    st.session_state.dark_mode = False
st.markdown(get_custom_css(dark_mode=st.session_state.dark_mode), unsafe_allow_html=True)

st.title("‚ù§Ô∏è T∆∞ v·∫•n Tim M·∫°ch")

# Tabs cho c√°c b·ªánh tim m·∫°ch
tab1, tab2, tab3, tab4 = st.tabs(["ü©∫ TƒÉng Huy·∫øt √Åp", "üíî Suy Tim", "üßà R·ªëi Lo·∫°n Lipid M√°u", "üìä ƒêo Huy·∫øt √Åp"])

# ============= TAB TƒÇNG HUY·∫æT √ÅP =============
with tab1:
    st.header("TƒÉng Huy·∫øt √Åp (Cao huy·∫øt √°p)")
    
    # Gi·ªõi thi·ªáu
    with st.expander("üìñ TƒÉng huy·∫øt √°p l√† g√¨?", expanded=True):
        st.markdown(hypertension.DISEASE_INFO["description_vn"])
        st.info(f"**Ph·ªï bi·∫øn:** {hypertension.DISEASE_INFO['prevalence_vn']}")
    
    # Tri·ªáu ch·ª©ng
    with st.expander("üîç D·∫•u hi·ªáu nh·∫≠n bi·∫øt"):
        st.subheader("Tri·ªáu ch·ª©ng th∆∞·ªùng g·∫∑p:")
        for symptom in hypertension.SYMPTOMS["common_vn"]:
            st.markdown(f"- {symptom}")
        
        st.error("**‚ö†Ô∏è TRI·ªÜU CH·ª®NG NGUY HI·ªÇM - G·ªåI 115:**")
        for symptom in hypertension.SYMPTOMS["emergency_vn"]:
            st.markdown(f"**{symptom}**")
    
    # Thu·ªëc
    with st.expander("üíä Thu·ªëc ƒëi·ªÅu tr·ªã"):
        st.warning(hypertension.MEDICATIONS["overview_vn"])
        
        for drug_key, drug_info in hypertension.MEDICATIONS["drug_classes"].items():
            st.subheader(drug_info["name_vn"])
            st.markdown(f"**V√≠ d·ª•:** {', '.join(drug_info['examples_vn'])}")
            st.markdown(f"**C∆° ch·∫ø:** {drug_info['mechanism_vn']}")
            st.markdown(f"üí° {drug_info['note_vn']}")
            st.divider()
    
    # Ch·∫ø ƒë·ªô ƒÉn
    with st.expander("üçΩÔ∏è Ch·∫ø ƒë·ªô ƒÉn DASH"):
        st.markdown(hypertension.NUTRITION_PLAN["overview_vn"])
        
        col1, col2 = st.columns(2)
        with col1:
            st.success("**‚úÖ N√äN ƒÇN:**")
            for category, foods in hypertension.NUTRITION_PLAN["recommended_foods"].items():
                if category != "healthy_fats_vn":
                    st.markdown(f"**{category.replace('_vn', '').title()}:**")
                    for food in foods[:3]:  # Ch·ªâ hi·ªÉn th·ªã 3 m√≥n ƒë·∫ßu
                        st.markdown(f"- {food}")
        
        with col2:
            st.error("**üö´ TR√ÅNH:**")
            for category, foods in hypertension.NUTRITION_PLAN["foods_to_avoid"].items():
                for food in foods[:4]:
                    st.markdown(f"{food}")
        
        st.info(hypertension.NUTRITION_PLAN["sodium_limit_vn"])
    
    # V·∫≠n ƒë·ªông
    with st.expander("üèÉ V·∫≠n ƒë·ªông & Luy·ªán t·∫≠p"):
        st.markdown(hypertension.EXERCISE_PLAN["overview_vn"])
        
        for exercise_type, details in hypertension.EXERCISE_PLAN["recommended_exercises"].items():
            st.subheader(f"{details['name']}")
            st.markdown(f"**V√≠ d·ª•:** {', '.join(details['examples'][:3])}")
            st.markdown(f"**T·∫ßn su·∫•t:** {details['frequency']}")
            st.markdown(f"**Th·ªùi gian:** {details['duration']}")

# ============= TAB SUY TIM =============
with tab2:
    st.header("Suy Tim")
    
    with st.expander("üìñ Suy tim l√† g√¨?", expanded=True):
        st.markdown(heart_failure.DISEASE_INFO["simple_explanation_vn"])
    
    with st.expander("üö® 5 d·∫•u hi·ªáu ch√≠nh - 5 ch·ªØ H"):
        signs = heart_failure.SYMPTOMS_SIMPLE["main_signs_vn"]
        st.subheader(signs["title"])
        
        for sign in signs["signs"]:
            st.markdown(f"### {sign['letter']}")
            st.markdown(f"**{sign['description']}**")
            for detail in sign['details']:
                st.markdown(detail)
            st.divider()
    
    with st.expander("üíä Thu·ªëc ƒëi·ªÅu tr·ªã (gi·∫£i th√≠ch ƒë∆°n gi·∫£n)"):
        st.warning(heart_failure.MEDICATIONS_SIMPLE["warning_vn"])
        
        for drug in heart_failure.MEDICATIONS_SIMPLE["common_drugs_simple"][:2]:  # 2 thu·ªëc ƒë·∫ßu
            st.subheader(f"{drug['type']}")
            st.caption(drug['street_name'])
            st.markdown(f"**T√°c d·ª•ng:** {drug['what_it_does']}")
            
            st.markdown("**L·ª£i √≠ch:**")
            for benefit in drug['benefits']:
                st.markdown(benefit)
    
    with st.expander("üçΩÔ∏è Ch·∫ø ƒë·ªô ƒÉn cho ng∆∞·ªùi suy tim"):
        st.markdown(heart_failure.NUTRITION_SIMPLE["main_rule_vn"])
        st.info(heart_failure.NUTRITION_SIMPLE["salt_restriction_simple"]["why_vn"])

# ============= TAB R·ªêI LO·∫†N LIPID M√ÅU =============
with tab3:
    st.header("üßà R·ªëi Lo·∫°n Lipid M√°u (Cholesterol & Triglyceride)")
    
    # Gi·ªõi thi·ªáu
    with st.expander("üìñ R·ªëi lo·∫°n lipid m√°u l√† g√¨?", expanded=True):
        st.markdown(dyslipidemia.DYSLIPIDEMIA_INFO["what_is_it"])
        st.warning(dyslipidemia.DYSLIPIDEMIA_INFO["why_dangerous"])
        
        st.subheader("üî¨ C√°c ch·ªâ s·ªë Lipid:")
        for lipid_key, lipid_info in dyslipidemia.DYSLIPIDEMIA_INFO["lipid_types"].items():
            with st.container():
                st.markdown(f"**{lipid_info['name']}** ({lipid_info['abbreviation']})")
                st.caption(lipid_info["simple_explanation"])
                st.divider()
    
    # Ph√¢n lo·∫°i th·ª±c ph·∫©m Traffic Light
    with st.expander("üö¶ PH√ÇN LO·∫†I TH·ª∞C PH·∫®M - D·ªÖ Hi·ªÉu, D·ªÖ Nh·ªõ", expanded=True):
        st.markdown("### H·ªá th·ªëng m√†u s·∫Øc gi√∫p b·∫°n bi·∫øt ngay th·ª±c ph·∫©m n√†o an to√†n!")
        
        # ƒê·ªè - Nguy hi·ªÉm
        st.error("### üî¥ ƒê·ªé - NGUY HI·ªÇM: TR√ÅNH HO√ÄN TO√ÄN")
        st.markdown(dyslipidemia.FOOD_SAFETY_CLASSIFICATION["red_danger"]["rule"])
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("**Trans Fat:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["red_danger"]["foods"]["trans_fat_foods"][:3]:
                st.markdown(food)
        with col2:
            st.markdown("**Cholesterol C·ª±c Cao:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["red_danger"]["foods"]["very_high_cholesterol"][:3]:
                st.markdown(food)
        with col3:
            st.markdown("**M·ª° B√£o H√≤a Cao:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["red_danger"]["foods"]["very_high_saturated_fat"][:3]:
                st.markdown(food)
        
        # Cam - H·∫°n ch·∫ø
        st.warning("### üü† CAM - H·∫†N CH·∫æ: ƒÇn √≠t, < 2-3 l·∫ßn/tu·∫ßn")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**Th·ªãt Nhi·ªÅu M·ª°:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["orange_limit"]["foods"]["fatty_meat"][:4]:
                st.markdown(food)
        with col2:
            st.markdown("**Th·ªãt Ch·∫ø Bi·∫øn:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["orange_limit"]["foods"]["processed_meat"][:4]:
                st.markdown(food)
        
        # Xanh - An to√†n
        st.success("### üü¢ XANH L√Å - AN TO√ÄN: ƒÇn t·ª± do")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("**Rau:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["green_safe"]["foods"]["vegetables"][:4]:
                st.markdown(food)
        with col2:
            st.markdown("**Tr√°i C√¢y:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["green_safe"]["foods"]["fruits"][:4]:
                st.markdown(food)
        with col3:
            st.markdown("**Ng≈© C·ªëc:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["green_safe"]["foods"]["whole_grains"][:4]:
                st.markdown(food)
        
        # Xanh ƒë·∫≠m - R·∫•t t·ªët
        st.success("### üü© XANH ƒê·∫¨M - R·∫§T T·ªêT: N√™n ƒÉn nhi·ªÅu!")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**C√° Gi√†u Omega-3:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["dark_green_excellent"]["foods"]["omega3_fish"]:
                st.markdown(food)
        with col2:
            st.markdown("**H·∫°t:**")
            for food in dyslipidemia.FOOD_SAFETY_CLASSIFICATION["dark_green_excellent"]["foods"]["nuts_seeds"]:
                st.markdown(food)
        
        st.info("üí° **M·∫πo:** C√†ng XANH c√†ng T·ªêT - c√†ng ƒê·ªé c√†ng NGUY HI·ªÇM!")
    
    # B·∫£ng tra c·ª©u nhanh
    with st.expander("üìä B·∫¢NG TRA C·ª®U NHANH - M√≥n Ph·ªï Bi·∫øn VN"):
        category = st.selectbox(
            "Ch·ªçn lo·∫°i m√≥n:",
            ["M√≥n S√°ng", "B·ªØa Ch√≠nh", "ƒê·ªì ƒÇn V·∫∑t", "Protein", "D·∫ßu N·∫•u ƒÇn", "ƒê·ªì U·ªëng"]
        )
        
        if category == "M√≥n S√°ng":
            data = dyslipidemia.QUICK_REFERENCE_TABLE["breakfast_foods"]
        elif category == "B·ªØa Ch√≠nh":
            data = dyslipidemia.QUICK_REFERENCE_TABLE["lunch_dinner"]
        elif category == "ƒê·ªì ƒÇn V·∫∑t":
            data = dyslipidemia.QUICK_REFERENCE_TABLE["snacks"]
        elif category == "Protein":
            data = dyslipidemia.QUICK_REFERENCE_TABLE["proteins"]
        elif category == "D·∫ßu N·∫•u ƒÇn":
            data = dyslipidemia.QUICK_REFERENCE_TABLE["cooking_oils"]
        else:  # ƒê·ªì U·ªëng
            data = dyslipidemia.QUICK_REFERENCE_TABLE["beverages"]
        
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            st.error("**üî¥ ƒê·ªé**")
            for item in data["red"]:
                st.markdown(f"- {item}")
        with col2:
            st.warning("**üü† CAM**")
            for item in data["orange"]:
                st.markdown(f"- {item}")
        with col3:
            st.info("**üü° V√ÄNG**")
            for item in data["yellow"]:
                st.markdown(f"- {item}")
        with col4:
            st.success("**üü¢ XANH**")
            for item in data["green"]:
                st.markdown(f"- {item}")
        with col5:
            st.success("**üü© XANH ƒê·∫¨M**")
            for item in data["dark_green"]:
                st.markdown(f"- {item}")
    
    # Gi·∫£i th√≠ch v·ªÅ c√°c lo·∫°i m·ª°
    with st.expander("üßà C√°c Lo·∫°i Ch·∫•t B√©o - T·ªët v√† X·∫•u"):
        st.subheader("‚ò†Ô∏è Trans Fat - M·ª† CHUY·ªÇN H√ìA (X·∫§U NH·∫§T!)")
        st.markdown(dyslipidemia.FAT_TYPES_EXPLANATION["trans_fat"]["simple"])
        st.error("**T·∫°i sao nguy hi·ªÉm:**")
        for reason in dyslipidemia.FAT_TYPES_EXPLANATION["trans_fat"]["why_dangerous"][:3]:
            st.markdown(f"- {reason}")
        st.markdown("**C√≥ trong:** " + ", ".join(dyslipidemia.FAT_TYPES_EXPLANATION["trans_fat"]["sources"][:5]))
        
        st.divider()
        
        st.subheader("ü•© M·ª° B√£o H√≤a (X·∫§U)")
        st.markdown(dyslipidemia.FAT_TYPES_EXPLANATION["saturated_fat"]["simple"])
        st.markdown("**C√≥ trong:** " + ", ".join(dyslipidemia.FAT_TYPES_EXPLANATION["saturated_fat"]["sources"][:5]))
        st.warning(dyslipidemia.FAT_TYPES_EXPLANATION["saturated_fat"]["recommendation"])
        
        st.divider()
        
        st.subheader("ü´í M·ª° Kh√¥ng B√£o H√≤a ƒê∆°n (T·ªêT)")
        st.markdown(dyslipidemia.FAT_TYPES_EXPLANATION["monounsaturated_fat"]["simple"])
        st.success("**L·ª£i √≠ch:** " + ", ".join(dyslipidemia.FAT_TYPES_EXPLANATION["monounsaturated_fat"]["why_good"][:2]))
        st.markdown("**C√≥ trong:** " + ", ".join(dyslipidemia.FAT_TYPES_EXPLANATION["monounsaturated_fat"]["sources"]))
        
        st.divider()
        
        st.subheader("üêü Omega-3 (R·∫§T T·ªêT!)")
        st.markdown(dyslipidemia.FAT_TYPES_EXPLANATION["polyunsaturated_fat"]["types"]["omega3"]["name"])
        st.success("**L·ª£i √≠ch:** " + ", ".join(dyslipidemia.FAT_TYPES_EXPLANATION["polyunsaturated_fat"]["types"]["omega3"]["benefits"][:2]))
        st.markdown("**C√≥ trong:** " + ", ".join(dyslipidemia.FAT_TYPES_EXPLANATION["polyunsaturated_fat"]["types"]["omega3"]["sources"]))
        st.info(dyslipidemia.FAT_TYPES_EXPLANATION["polyunsaturated_fat"]["types"]["omega3"]["recommendation"])
    
    # Thu·ªëc ƒëi·ªÅu tr·ªã
    with st.expander("üíä Thu·ªëc ƒêi·ªÅu Tr·ªã"):
        st.subheader("üíä STATINS - Thu·ªëc H·∫° Cholesterol (Nh√≥m Ch√≠nh)")
        st.markdown(dyslipidemia.STATINS["description"])
        st.info("**C∆° ch·∫ø:** " + dyslipidemia.STATINS["how_it_works"]["simple"])
        
        st.markdown("**Hi·ªáu qu·∫£:**")
        for effect in dyslipidemia.STATINS["how_it_works"]["effects"]:
            st.markdown(f"- {effect}")
        
        st.markdown("### C√°c lo·∫°i Statin ph·ªï bi·∫øn t·∫°i VN:")
        for statin in dyslipidemia.STATINS["common_statins"][:3]:
            with st.container():
                st.markdown(f"**{statin['name']}**")
                st.caption(f"Nh√£n VN: {', '.join(statin['vietnamese_brands'])}")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Li·ªÅu", statin["dosage"])
                with col2:
                    st.metric("Hi·ªáu qu·∫£", statin["ldl_reduction"])
                with col3:
                    st.metric("Gi√°", statin["cost"])
                st.caption(f"üí° {statin['note']}")
                st.divider()
        
        st.warning("**T√°c d·ª•ng ph·ª• th∆∞·ªùng g·∫∑p:**")
        for se in dyslipidemia.STATINS["side_effects"]["common"]:
            st.markdown(f"- {se}")
        
        st.success(dyslipidemia.STATINS["side_effects"]["myth_busting"])
        
        st.divider()
        
        st.subheader("üíä FIBRATES - H·∫° Triglyceride")
        st.markdown(dyslipidemia.FIBRATES["description"])
        st.markdown("**Hi·ªáu qu·∫£:**")
        for effect in dyslipidemia.FIBRATES["how_it_works"]["effects"]:
            st.markdown(f"- {effect}")
    
    # C√¥ng c·ª• ph√¢n lo·∫°i lipid
    with st.expander("üß™ C√¥ng C·ª• Ph√¢n Lo·∫°i Ch·ªâ S·ªë Lipid"):
        st.markdown("Nh·∫≠p k·∫øt qu·∫£ x√©t nghi·ªám c·ªßa b·∫°n:")
        
        col1, col2 = st.columns(2)
        with col1:
            total_chol = st.number_input(
                "Cholesterol to√†n ph·∫ßn (mmol/L)",
                min_value=2.0,
                max_value=15.0,
                value=5.0,
                step=0.1,
                help="B√¨nh th∆∞·ªùng: < 5.2 mmol/L"
            )
            ldl = st.number_input(
                "LDL - M·ª° x·∫•u (mmol/L)",
                min_value=1.0,
                max_value=10.0,
                value=3.0,
                step=0.1,
                help="M·ª•c ti√™u: < 2.6 mmol/L"
            )
        
        with col2:
            hdl = st.number_input(
                "HDL - M·ª° t·ªët (mmol/L)",
                min_value=0.5,
                max_value=3.0,
                value=1.3,
                step=0.1,
                help="Nam: > 1.0, N·ªØ: > 1.3 mmol/L"
            )
            tg = st.number_input(
                "Triglyceride (mmol/L)",
                min_value=0.5,
                max_value=20.0,
                value=1.5,
                step=0.1,
                help="B√¨nh th∆∞·ªùng: < 1.7 mmol/L"
            )
        
        if st.button("Ph√¢n lo·∫°i & T∆∞ v·∫•n", type="primary"):
            classification = dyslipidemia.classify_lipid_levels(total_chol, ldl, hdl, tg)
            
            st.subheader("üìä K·∫øt qu·∫£ ph√¢n lo·∫°i:")
            
            # Total Cholesterol
            if classification["total_cholesterol"]["level"] == "T·ªëi ∆∞u":
                st.success(f"**Cholesterol to√†n ph·∫ßn:** {total_chol} mmol/L - {classification['total_cholesterol']['level']}")
            elif classification["total_cholesterol"]["level"] in ["Cao", "R·∫•t cao"]:
                st.error(f"**Cholesterol to√†n ph·∫ßn:** {total_chol} mmol/L - {classification['total_cholesterol']['level']}")
            else:
                st.warning(f"**Cholesterol to√†n ph·∫ßn:** {total_chol} mmol/L - {classification['total_cholesterol']['level']}")
            
            # LDL
            if classification["ldl"]["level"] == "T·ªëi ∆∞u":
                st.success(f"**LDL (m·ª° x·∫•u):** {ldl} mmol/L - {classification['ldl']['level']}")
            elif classification["ldl"]["level"] in ["Cao", "R·∫•t cao"]:
                st.error(f"**LDL (m·ª° x·∫•u):** {ldl} mmol/L - {classification['ldl']['level']}")
            else:
                st.warning(f"**LDL (m·ª° x·∫•u):** {ldl} mmol/L - {classification['ldl']['level']}")
            st.caption(classification["ldl"]["recommendation"])
            
            # HDL
            if classification["hdl"]["level"] == "Cao (T·ªët)":
                st.success(f"**HDL (m·ª° t·ªët):** {hdl} mmol/L - {classification['hdl']['level']}")
            else:
                st.warning(f"**HDL (m·ª° t·ªët):** {hdl} mmol/L - {classification['hdl']['level']}")
            st.caption(classification["hdl"]["recommendation"])
            
            # Triglyceride
            if classification["triglyceride"]["level"] == "B√¨nh th∆∞·ªùng":
                st.success(f"**Triglyceride:** {tg} mmol/L - {classification['triglyceride']['level']}")
            elif classification["triglyceride"]["level"] in ["Cao", "R·∫•t cao"]:
                st.error(f"**Triglyceride:** {tg} mmol/L - {classification['triglyceride']['level']}")
            else:
                st.warning(f"**Triglyceride:** {tg} mmol/L - {classification['triglyceride']['level']}")
            st.caption(classification["triglyceride"]["recommendation"])

# ============= TAB ƒêO HUY·∫æT √ÅP =============
with tab4:
    st.header("üìä C√¥ng c·ª• ƒë√°nh gi√° huy·∫øt √°p")
    
    st.markdown("Nh·∫≠p huy·∫øt √°p c·ªßa b·∫°n ƒë·ªÉ xem ph√¢n lo·∫°i:")
    
    col1, col2 = st.columns(2)
    with col1:
        systolic = st.number_input(
            "Huy·∫øt √°p t√¢m thu (s·ªë tr√™n)",
            min_value=70,
            max_value=250,
            value=120,
            step=1
        )
    with col2:
        diastolic = st.number_input(
            "Huy·∫øt √°p t√¢m tr∆∞∆°ng (s·ªë d∆∞·ªõi)",
            min_value=40,
            max_value=150,
            value=80,
            step=1
        )
    
    if st.button("ƒê√°nh gi√°", type="primary"):
        result = classify_blood_pressure(systolic, diastolic)
        
        if result["color"] == "red":
            st.error(f"### {result['name_vn']}")
            st.error(f"**Huy·∫øt √°p: {systolic}/{diastolic} mmHg**")
            st.error(f"**{result['action_vn']}**")
        elif result["color"] == "orange":
            st.warning(f"### {result['name_vn']}")
            st.warning(f"**Huy·∫øt √°p: {systolic}/{diastolic} mmHg**")
            st.warning(f"**{result['action_vn']}**")
        elif result["color"] == "yellow":
            st.info(f"### {result['name_vn']}")
            st.info(f"**Huy·∫øt √°p: {systolic}/{diastolic} mmHg**")
            st.info(f"**{result['action_vn']}**")
        else:
            st.success(f"### {result['name_vn']}")
            st.success(f"**Huy·∫øt √°p: {systolic}/{diastolic} mmHg**")
            st.success(f"**{result['action_vn']}**")
        
        # Hi·ªÉn th·ªã b·∫£ng ph√¢n lo·∫°i
        st.subheader("B·∫£ng ph√¢n lo·∫°i huy·∫øt √°p:")
        st.table({
            "Ph√¢n lo·∫°i": ["B√¨nh th∆∞·ªùng", "Cao b√¨nh th∆∞·ªùng", "THA ƒê·ªô 1", "THA ƒê·ªô 2", "C∆°n t√°n"],
            "T√¢m thu (mmHg)": ["< 120", "120-129", "130-139", "‚â• 140", "‚â• 180"],
            "T√¢m tr∆∞∆°ng (mmHg)": ["< 80", "< 80", "80-89", "‚â• 90", "‚â• 120"]
        })

# N√∫t quay l·∫°i
st.divider()
if st.button("‚¨ÖÔ∏è Quay l·∫°i trang ch√≠nh"):
    st.switch_page("app.py")

