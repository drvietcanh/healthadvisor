"""
Trang t∆∞ v·∫•n v·ªÅ b·ªánh Tim M·∫°ch
"""
import streamlit as st
import sys
sys.path.append('..')

from diseases.cardiovascular import hypertension, heart_failure
from core.utils import classify_blood_pressure
from core.ui_config import get_custom_css

st.set_page_config(page_title="Tim M·∫°ch", page_icon="‚ù§Ô∏è", layout="wide")

# √Åp d·ª•ng Dark Mode
if 'dark_mode' not in st.session_state:
    st.session_state.dark_mode = False
st.markdown(get_custom_css(dark_mode=st.session_state.dark_mode), unsafe_allow_html=True)

st.title("‚ù§Ô∏è T∆∞ v·∫•n Tim M·∫°ch")

# Tabs cho c√°c b·ªánh tim m·∫°ch
tab1, tab2, tab3 = st.tabs(["ü©∫ TƒÉng Huy·∫øt √Åp", "üíî Suy Tim", "üìä ƒêo Huy·∫øt √Åp"])

# ============= TAB TƒÇNG HUY·∫æT √ÅP =============
with tab1:
    st.header("TƒÉng Huy·∫øt √Åp (Cao huy·∫øt √°p)")
    
    # Gi·ªõi thi·ªáu
    with st.expander("üìñ TƒÉng huy·∫øt √°p l√† g√¨?", expanded=True):
        st.markdown(hypertension.DISEASE_INFO["description_vn"])
        st.info(f"**Ph·ªï bi·∫øn:** {hypertension.DISEASE_INFO['prevalence_vn']}")
    
    # Tri·ªáu ch·ª©ng
    with st.expander("üîç D·∫•u hi·ªáu nh·∫≠n bi·∫øt"):
        st.subheader("Tri·ªáu ch·ª©ng th∆∞·ªùng g·∫∑p:")
        for symptom in hypertension.SYMPTOMS["common_vn"]:
            st.markdown(f"- {symptom}")
        
        st.error("**‚ö†Ô∏è TRI·ªÜU CH·ª®NG NGUY HI·ªÇM - G·ªåI 115:**")
        for symptom in hypertension.SYMPTOMS["emergency_vn"]:
            st.markdown(f"**{symptom}**")
    
    # Thu·ªëc
    with st.expander("üíä Thu·ªëc ƒëi·ªÅu tr·ªã"):
        st.warning(hypertension.MEDICATIONS["overview_vn"])
        
        for drug_key, drug_info in hypertension.MEDICATIONS["drug_classes"].items():
            st.subheader(drug_info["name_vn"])
            st.markdown(f"**V√≠ d·ª•:** {', '.join(drug_info['examples_vn'])}")
            st.markdown(f"**C∆° ch·∫ø:** {drug_info['mechanism_vn']}")
            st.markdown(f"üí° {drug_info['note_vn']}")
            st.divider()
    
    # Ch·∫ø ƒë·ªô ƒÉn
    with st.expander("üçΩÔ∏è Ch·∫ø ƒë·ªô ƒÉn DASH"):
        st.markdown(hypertension.NUTRITION_PLAN["overview_vn"])
        
        col1, col2 = st.columns(2)
        with col1:
            st.success("**‚úÖ N√äN ƒÇN:**")
            for category, foods in hypertension.NUTRITION_PLAN["recommended_foods"].items():
                if category != "healthy_fats_vn":
                    st.markdown(f"**{category.replace('_vn', '').title()}:**")
                    for food in foods[:3]:  # Ch·ªâ hi·ªÉn th·ªã 3 m√≥n ƒë·∫ßu
                        st.markdown(f"- {food}")
        
        with col2:
            st.error("**üö´ TR√ÅNH:**")
            for category, foods in hypertension.NUTRITION_PLAN["foods_to_avoid"].items():
                for food in foods[:4]:
                    st.markdown(f"{food}")
        
        st.info(hypertension.NUTRITION_PLAN["sodium_limit_vn"])
    
    # V·∫≠n ƒë·ªông
    with st.expander("üèÉ V·∫≠n ƒë·ªông & Luy·ªán t·∫≠p"):
        st.markdown(hypertension.EXERCISE_PLAN["overview_vn"])
        
        for exercise_type, details in hypertension.EXERCISE_PLAN["recommended_exercises"].items():
            st.subheader(f"{details['name']}")
            st.markdown(f"**V√≠ d·ª•:** {', '.join(details['examples'][:3])}")
            st.markdown(f"**T·∫ßn su·∫•t:** {details['frequency']}")
            st.markdown(f"**Th·ªùi gian:** {details['duration']}")

# ============= TAB SUY TIM =============
with tab2:
    st.header("Suy Tim")
    
    with st.expander("üìñ Suy tim l√† g√¨?", expanded=True):
        st.markdown(heart_failure.DISEASE_INFO["simple_explanation_vn"])
    
    with st.expander("üö® 5 d·∫•u hi·ªáu ch√≠nh - 5 ch·ªØ H"):
        signs = heart_failure.SYMPTOMS_SIMPLE["main_signs_vn"]
        st.subheader(signs["title"])
        
        for sign in signs["signs"]:
            st.markdown(f"### {sign['letter']}")
            st.markdown(f"**{sign['description']}**")
            for detail in sign['details']:
                st.markdown(detail)
            st.divider()
    
    with st.expander("üíä Thu·ªëc ƒëi·ªÅu tr·ªã (gi·∫£i th√≠ch ƒë∆°n gi·∫£n)"):
        st.warning(heart_failure.MEDICATIONS_SIMPLE["warning_vn"])
        
        for drug in heart_failure.MEDICATIONS_SIMPLE["common_drugs_simple"][:2]:  # 2 thu·ªëc ƒë·∫ßu
            st.subheader(f"{drug['type']}")
            st.caption(drug['street_name'])
            st.markdown(f"**T√°c d·ª•ng:** {drug['what_it_does']}")
            
            st.markdown("**L·ª£i √≠ch:**")
            for benefit in drug['benefits']:
                st.markdown(benefit)
    
    with st.expander("üçΩÔ∏è Ch·∫ø ƒë·ªô ƒÉn cho ng∆∞·ªùi suy tim"):
        st.markdown(heart_failure.NUTRITION_SIMPLE["main_rule_vn"])
        st.info(heart_failure.NUTRITION_SIMPLE["salt_restriction_simple"]["why_vn"])

# ============= TAB ƒêO HUY·∫æT √ÅP =============
with tab3:
    st.header("üìä C√¥ng c·ª• ƒë√°nh gi√° huy·∫øt √°p")
    
    st.markdown("Nh·∫≠p huy·∫øt √°p c·ªßa b·∫°n ƒë·ªÉ xem ph√¢n lo·∫°i:")
    
    col1, col2 = st.columns(2)
    with col1:
        systolic = st.number_input(
            "Huy·∫øt √°p t√¢m thu (s·ªë tr√™n)",
            min_value=70,
            max_value=250,
            value=120,
            step=1
        )
    with col2:
        diastolic = st.number_input(
            "Huy·∫øt √°p t√¢m tr∆∞∆°ng (s·ªë d∆∞·ªõi)",
            min_value=40,
            max_value=150,
            value=80,
            step=1
        )
    
    if st.button("ƒê√°nh gi√°", type="primary"):
        result = classify_blood_pressure(systolic, diastolic)
        
        if result["color"] == "red":
            st.error(f"### {result['name_vn']}")
            st.error(f"**Huy·∫øt √°p: {systolic}/{diastolic} mmHg**")
            st.error(f"**{result['action_vn']}**")
        elif result["color"] == "orange":
            st.warning(f"### {result['name_vn']}")
            st.warning(f"**Huy·∫øt √°p: {systolic}/{diastolic} mmHg**")
            st.warning(f"**{result['action_vn']}**")
        elif result["color"] == "yellow":
            st.info(f"### {result['name_vn']}")
            st.info(f"**Huy·∫øt √°p: {systolic}/{diastolic} mmHg**")
            st.info(f"**{result['action_vn']}**")
        else:
            st.success(f"### {result['name_vn']}")
            st.success(f"**Huy·∫øt √°p: {systolic}/{diastolic} mmHg**")
            st.success(f"**{result['action_vn']}**")
        
        # Hi·ªÉn th·ªã b·∫£ng ph√¢n lo·∫°i
        st.subheader("B·∫£ng ph√¢n lo·∫°i huy·∫øt √°p:")
        st.table({
            "Ph√¢n lo·∫°i": ["B√¨nh th∆∞·ªùng", "Cao b√¨nh th∆∞·ªùng", "THA ƒê·ªô 1", "THA ƒê·ªô 2", "C∆°n t√°n"],
            "T√¢m thu (mmHg)": ["< 120", "120-129", "130-139", "‚â• 140", "‚â• 180"],
            "T√¢m tr∆∞∆°ng (mmHg)": ["< 80", "< 80", "80-89", "‚â• 90", "‚â• 120"]
        })

# N√∫t quay l·∫°i
st.divider()
if st.button("‚¨ÖÔ∏è Quay l·∫°i trang ch√≠nh"):
    st.switch_page("app.py")

