"""
History - L·ªãch s·ª≠ u·ªëng thu·ªëc v√† th·ªëng k√™
"""
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import os
from .scheduler import load_history
from .medication_manager import get_all_medications

def get_adherence_rate(days=7):
    """
    T√≠nh t·ª∑ l·ªá tu√¢n th·ªß u·ªëng thu·ªëc
    
    Args:
        days: S·ªë ng√†y t√≠nh t·ª´ h√¥m nay tr·ªü v·ªÅ tr∆∞·ªõc
    
    Returns:
        float: T·ª∑ l·ªá % (0-100)
    """
    history = load_history()
    medications = get_all_medications()
    
    if not medications:
        return 0
    
    # T√≠nh t·ªïng s·ªë li·ªÅu d·ª± ki·∫øn trong N ng√†y
    total_expected = 0
    for med in medications:
        total_expected += len(med['times']) * days
    
    # ƒê·∫øm s·ªë li·ªÅu ƒë√£ u·ªëng
    taken_count = 0
    cutoff_date = datetime.now() - timedelta(days=days)
    
    for record in history:
        if record['status'] == 'taken':
            record_time = datetime.fromisoformat(record['actual_time'])
            if record_time >= cutoff_date:
                taken_count += 1
    
    if total_expected == 0:
        return 0
    
    return (taken_count / total_expected) * 100

def export_history_csv():
    """Xu·∫•t l·ªãch s·ª≠ ra file CSV"""
    history = load_history()
    
    if not history:
        return None
    
    # Chuy·ªÉn sang DataFrame
    df = pd.DataFrame(history)
    
    # L·∫•y th√¥ng tin thu·ªëc
    medications = get_all_medications(active_only=False)
    med_dict = {m['id']: m['name'] for m in medications}
    
    df['medication_name'] = df['med_id'].map(med_dict)
    
    # Format l·∫°i th·ªùi gian
    df['scheduled_time'] = pd.to_datetime(df['scheduled_time']).dt.strftime('%Y-%m-%d %H:%M')
    df['actual_time'] = pd.to_datetime(df['actual_time']).dt.strftime('%Y-%m-%d %H:%M')
    
    # Ch·ªçn v√† s·∫Øp x·∫øp c·ªôt
    columns = ['scheduled_time', 'actual_time', 'medication_name', 'status', 'notes']
    df = df[columns]
    
    # ƒê·ªïi t√™n c·ªôt sang ti·∫øng Vi·ªát
    df.columns = ['Gi·ªù d·ª± ki·∫øn', 'Gi·ªù th·ª±c t·∫ø', 'T√™n thu·ªëc', 'Tr·∫°ng th√°i', 'Ghi ch√∫']
    
    # Chuy·ªÉn status sang ti·∫øng Vi·ªát
    status_map = {
        'taken': 'ƒê√£ u·ªëng',
        'skipped': 'B·ªè qua',
        'missed': 'Qu√™n u·ªëng'
    }
    df['Tr·∫°ng th√°i'] = df['Tr·∫°ng th√°i'].map(status_map)
    
    # Xu·∫•t CSV v·ªõi UTF-8-BOM
    csv = df.to_csv(index=False, encoding='utf-8-sig')
    
    return csv

def render_history_view():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ u·ªëng thu·ªëc"""
    st.subheader("üìä L·ªãch s·ª≠ & Th·ªëng k√™")
    
    # Tabs
    tab1, tab2 = st.tabs(["üìà Th·ªëng k√™", "üìú L·ªãch s·ª≠"])
    
    # ===== TAB TH·ªêNG K√ä =====
    with tab1:
        # T·ª∑ l·ªá tu√¢n th·ªß
        col1, col2, col3 = st.columns(3)
        
        with col1:
            rate_7d = get_adherence_rate(days=7)
            st.metric("üìä Tu√¢n th·ªß 7 ng√†y", f"{rate_7d:.1f}%")
            if rate_7d >= 80:
                st.success("‚úÖ T·ªët!")
            elif rate_7d >= 60:
                st.warning("‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán")
            else:
                st.error("‚ùå K√©m")
        
        with col2:
            rate_30d = get_adherence_rate(days=30)
            st.metric("üìä Tu√¢n th·ªß 30 ng√†y", f"{rate_30d:.1f}%")
        
        with col3:
            medications = get_all_medications()
            st.metric("üíä T·ªïng s·ªë thu·ªëc", len(medications))
        
        st.divider()
        
        # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng
        st.markdown("### üìà Xu h∆∞·ªõng tu√¢n th·ªß (7 ng√†y)")
        
        history = load_history()
        
        if history:
            # T·∫°o DataFrame
            df = pd.DataFrame(history)
            df['date'] = pd.to_datetime(df['actual_time']).dt.date
            
            # 7 ng√†y g·∫ßn nh·∫•t
            last_7_days = [(datetime.now().date() - timedelta(days=i)) for i in range(6, -1, -1)]
            
            daily_stats = []
            for day in last_7_days:
                taken = len(df[(df['date'] == day) & (df['status'] == 'taken')])
                skipped = len(df[(df['date'] == day) & (df['status'] == 'skipped')])
                
                # T·ªïng s·ªë li·ªÅu d·ª± ki·∫øn trong ng√†y
                total = 0
                for med in medications:
                    total += len(med['times'])
                
                daily_stats.append({
                    'Ng√†y': day.strftime('%d/%m'),
                    'ƒê√£ u·ªëng': taken,
                    'B·ªè qua': skipped,
                    'T·ª∑ l·ªá %': (taken/total*100) if total > 0 else 0
                })
            
            chart_df = pd.DataFrame(daily_stats)
            
            # V·∫Ω bi·ªÉu ƒë·ªì
            st.bar_chart(chart_df.set_index('Ng√†y')['T·ª∑ l·ªá %'])
            
            # Hi·ªÉn th·ªã b·∫£ng
            st.dataframe(chart_df, use_container_width=True)
        else:
            st.info("üìù Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠")
    
    # ===== TAB L·ªäCH S·ª¨ =====
    with tab2:
        history = load_history()
        
        if not history:
            st.info("üìù Ch∆∞a c√≥ l·ªãch s·ª≠ u·ªëng thu·ªëc")
            return
        
        # B·ªô l·ªçc
        col_filter1, col_filter2 = st.columns(2)
        
        with col_filter1:
            filter_days = st.selectbox(
                "Hi·ªÉn th·ªã",
                [7, 14, 30, 90, 365],
                format_func=lambda x: f"{x} ng√†y g·∫ßn nh·∫•t"
            )
        
        with col_filter2:
            filter_status = st.multiselect(
                "Tr·∫°ng th√°i",
                ["taken", "skipped", "missed"],
                default=["taken", "skipped"],
                format_func=lambda x: {"taken": "‚úÖ ƒê√£ u·ªëng", "skipped": "‚è≠Ô∏è B·ªè qua", "missed": "‚ö†Ô∏è Qu√™n"}[x]
            )
        
        # L·ªçc d·ªØ li·ªáu
        df = pd.DataFrame(history)
        df['date'] = pd.to_datetime(df['actual_time'])
        
        cutoff = datetime.now() - timedelta(days=filter_days)
        df = df[df['date'] >= cutoff]
        
        if filter_status:
            df = df[df['status'].isin(filter_status)]
        
        # L·∫•y t√™n thu·ªëc
        medications = get_all_medications(active_only=False)
        med_dict = {m['id']: m['name'] for m in medications}
        df['med_name'] = df['med_id'].map(med_dict)
        
        # Hi·ªÉn th·ªã
        df_display = df[['scheduled_time', 'actual_time', 'med_name', 'status', 'notes']].copy()
        df_display['scheduled_time'] = pd.to_datetime(df_display['scheduled_time']).dt.strftime('%d/%m %H:%M')
        df_display['actual_time'] = pd.to_datetime(df_display['actual_time']).dt.strftime('%d/%m %H:%M')
        
        status_map = {
            'taken': '‚úÖ ƒê√£ u·ªëng',
            'skipped': '‚è≠Ô∏è B·ªè qua',
            'missed': '‚ö†Ô∏è Qu√™n'
        }
        df_display['status'] = df_display['status'].map(status_map)
        
        df_display.columns = ['Gi·ªù d·ª± ki·∫øn', 'Gi·ªù th·ª±c t·∫ø', 'Thu·ªëc', 'Tr·∫°ng th√°i', 'Ghi ch√∫']
        
        st.dataframe(df_display.sort_values('Gi·ªù th·ª±c t·∫ø', ascending=False), use_container_width=True)
        
        # N√∫t xu·∫•t CSV
        st.divider()
        csv = export_history_csv()
        
        if csv:
            st.download_button(
                label="üì• T·∫£i xu·∫•t file CSV",
                data=csv,
                file_name=f"lich_su_uong_thuoc_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
                use_container_width=True
            )

