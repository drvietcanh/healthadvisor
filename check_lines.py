import os
from pathlib import Path

# T√¨m t·∫•t c·∫£ file .py
files_info = []
for root, dirs, files in os.walk('.'):
    # B·ªè qua th∆∞ m·ª•c ·∫©n v√† virtual env
    dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['venv', '__pycache__']]
    
    for file in files:
        if file.endswith('.py') and not file.startswith('check_'):
            filepath = os.path.join(root, file)
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    line_count = len(f.readlines())
                files_info.append((filepath, line_count))
            except:
                pass

# S·∫Øp x·∫øp theo s·ªë d√≤ng gi·∫£m d·∫ßn
files_info.sort(key=lambda x: x[1], reverse=True)

# In k·∫øt qu·∫£
print("\n" + "="*80)
print("KI·ªÇM TRA S·ªê D√íNG CODE - QUY T·∫ÆC: MAX 300 D√íNG/FILE")
print("="*80)

print("\nüî¥ C·∫¶N REFACTOR (> 300 d√≤ng):")
need_refactor = [f for f in files_info if f[1] > 300]
if need_refactor:
    for filepath, lines in need_refactor:
        print(f"  ‚ùå {filepath:60s} {lines:5d} d√≤ng")
else:
    print("  ‚úÖ Kh√¥ng c√≥ file n√†o!")

print("\nüü° C·∫¢NH B√ÅO (200-300 d√≤ng):")
warning_files = [f for f in files_info if 200 <= f[1] <= 300]
if warning_files:
    for filepath, lines in warning_files:
        print(f"  ‚ö†Ô∏è  {filepath:60s} {lines:5d} d√≤ng")
else:
    print("  ‚úÖ Kh√¥ng c√≥ file n√†o!")

print("\nüü¢ T·ªêT (< 200 d√≤ng):")
good_files = [f for f in files_info if f[1] < 200]
for filepath, lines in good_files[:10]:  # Ch·ªâ hi·ªán 10 file ƒë·∫ßu
    print(f"  ‚úÖ {filepath:60s} {lines:5d} d√≤ng")
if len(good_files) > 10:
    print(f"  ... v√† {len(good_files) - 10} file kh√°c")

print("\n" + "="*80)
print(f"T·ªîNG: {len(files_info)} files | C·∫ßn refactor: {len(need_refactor)} files")
print("="*80 + "\n")

