"""
Spine Tab Components
Hi·ªÉn th·ªã ƒëau th·∫Øt l∆∞ng v√† tho√°t v·ªã ƒëƒ©a ƒë·ªám
"""

import streamlit as st
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

try:
    from diseases.bone_joint.spine import (
        BACK_PAIN_INFO,
        BACK_PAIN_CAUSES,
        BACK_PAIN_MANAGEMENT,
        BACK_PAIN_EXERCISES
    )
    from diseases.bone_joint.spine import (
        HERNIATED_DISC_INFO,
        HERNIATED_DISC_SYMPTOMS,
        HERNIATED_DISC_TREATMENT
    )
    from diseases.bone_joint.spine import (
        SPINAL_POSTURE,
        SPINAL_EXERCISES,
        SPINAL_PROTECTION
    )
except ImportError:
    st.error("Kh√¥ng th·ªÉ t·∫£i module c·ªôt s·ªëng. Vui l√≤ng ki·ªÉm tra l·∫°i.")
    st.stop()


def render_back_pain_tab():
    """Tab ƒêau th·∫Øt l∆∞ng"""
    st.header("ü´Å ƒêau Th·∫Øt L∆∞ng")
    
    # Th√¥ng tin c∆° b·∫£n
    with st.expander("üìñ ƒêau th·∫Øt l∆∞ng l√† g√¨?", expanded=True):
        if BACK_PAIN_INFO:
            st.markdown(BACK_PAIN_INFO.get("simple_explanation", ""))
            
            if "types" in BACK_PAIN_INFO:
                types = BACK_PAIN_INFO["types"]
                col1, col2 = st.columns(2)
                with col1:
                    if "acute" in types:
                        acute = types["acute"]
                        st.info(f"""
                        **{acute.get('name', '')}**
                        
                        {acute.get('characteristics', '')}
                        
                        {acute.get('prognosis', '')}
                        """)
                with col2:
                    if "chronic" in types:
                        chronic = types["chronic"]
                        st.warning(f"""
                        **{chronic.get('name', '')}**
                        
                        {chronic.get('characteristics', '')}
                        
                        {chronic.get('prognosis', '')}
                        """)
    
    # Nguy√™n nh√¢n
    with st.expander("üîç Nguy√™n nh√¢n", expanded=False):
        if BACK_PAIN_CAUSES:
            causes = BACK_PAIN_CAUSES
            
            if "mechanical" in causes:
                mech = causes["mechanical"]
                st.markdown(f"### {mech.get('title', '')}")
                if "causes" in mech:
                    for cause_item in mech["causes"]:
                        if isinstance(cause_item, dict):
                            st.markdown(f"**{cause_item.get('cause', '')}**")
                            st.caption(f"**T·∫°i sao:** {cause_item.get('why', '')}")
                            st.markdown(f"**ƒê·∫∑c ƒëi·ªÉm:** {cause_item.get('characteristics', '')}")
                            st.divider()
            
            if "risk_factors" in causes:
                st.markdown("### Y·∫øu t·ªë nguy c∆°:")
                for factor in causes["risk_factors"]:
                    st.markdown(f"- {factor}")
    
    # ƒêi·ªÅu tr·ªã
    with st.expander("üíä ƒêi·ªÅu tr·ªã", expanded=False):
        if BACK_PAIN_MANAGEMENT:
            mgmt = BACK_PAIN_MANAGEMENT
            
            if "acute_stage" in mgmt:
                st.markdown("### Giai ƒëo·∫°n c·∫•p (<6 tu·∫ßn):")
                acute = mgmt["acute_stage"]
                if "principles" in acute:
                    st.markdown("**Nguy√™n t·∫Øc:**")
                    for principle in acute["principles"]:
                        st.markdown(f"- {principle}")
                
                if "medications" in acute:
                    st.markdown("**Thu·ªëc:**")
                    for med in acute["medications"]:
                        if isinstance(med, dict):
                            st.markdown(f"- **{med.get('drug', '')}:** {med.get('dose', '')}")
                            st.caption(med.get('note', ''))
            
            if "red_flags" in mgmt:
                st.error("**üö® D·∫•u hi·ªáu c·∫ßn ƒëi kh√°m ngay:**")
                for flag in mgmt["red_flags"]:
                    st.markdown(f"- {flag}")
    
    # B√†i t·∫≠p
    with st.expander("üèÉ B√†i t·∫≠p", expanded=False):
        if BACK_PAIN_EXERCISES:
            exercises = BACK_PAIN_EXERCISES
            
            if "acute_phase" in exercises:
                st.markdown("### Khi ƒëau c·∫•p:")
                acute_ex = exercises["acute_phase"]
                if "exercises" in acute_ex:
                    for ex in acute_ex["exercises"]:
                        if isinstance(ex, dict):
                            st.markdown(f"**{ex.get('name', '')}**")
                            st.markdown(f"C√°ch l√†m: {ex.get('how', '')}")
                            st.caption(f"S·ªë l·∫ßn: {ex.get('frequency', '')}")
                            st.divider()
            
            if "important" in exercises:
                st.warning(exercises["important"])


def render_herniated_disc_tab():
    """Tab Tho√°t v·ªã ƒëƒ©a ƒë·ªám"""
    st.header("ü´Å Tho√°t V·ªã ƒêƒ©a ƒê·ªám")
    
    # Th√¥ng tin c∆° b·∫£n
    with st.expander("üìñ Tho√°t v·ªã ƒëƒ©a ƒë·ªám l√† g√¨?", expanded=True):
        if HERNIATED_DISC_INFO:
            st.markdown(HERNIATED_DISC_INFO.get("simple_explanation", ""))
            
            if "common_locations" in HERNIATED_DISC_INFO:
                st.markdown("### V·ªã tr√≠ th∆∞·ªùng g·∫∑p:")
                locations = HERNIATED_DISC_INFO["common_locations"]
                for loc_key, loc_info in locations.items():
                    if isinstance(loc_info, dict):
                        st.markdown(f"#### {loc_info.get('name', loc_key)}")
                        if loc_info.get('symptoms'):
                            st.markdown("**Tri·ªáu ch·ª©ng:**")
                            for symptom in loc_info['symptoms']:
                                st.markdown(f"- {symptom}")
                        st.divider()
    
    # Tri·ªáu ch·ª©ng
    with st.expander("üîç Tri·ªáu ch·ª©ng", expanded=False):
        if HERNIATED_DISC_SYMPTOMS:
            symptoms = HERNIATED_DISC_SYMPTOMS
            
            st.markdown("### Tri·ªáu ch·ª©ng ch√≠nh:")
            if "main_symptoms" in symptoms:
                for symptom in symptoms["main_symptoms"]:
                    st.markdown(f"- {symptom}")
            
            if "severity" in symptoms:
                sev = symptoms["severity"]
                st.markdown("### M·ª©c ƒë·ªô:")
                for key, level_info in sev.items():
                    if isinstance(level_info, dict):
                        st.markdown(f"#### {level_info.get('level', key)}")
                        if level_info.get('symptoms'):
                            st.markdown("**Tri·ªáu ch·ª©ng:**")
                            for s in level_info['symptoms']:
                                st.markdown(f"- {s}")
                        st.markdown(f"**ƒêi·ªÅu tr·ªã:** {level_info.get('treatment', '')}")
                        st.divider()
            
            if "red_flags" in symptoms:
                st.error("**üö® D·∫•u hi·ªáu c·∫ßn ƒëi kh√°m ngay:**")
                for flag in symptoms["red_flags"]:
                    st.markdown(f"- {flag}")
    
    # ƒêi·ªÅu tr·ªã
    with st.expander("üíä ƒêi·ªÅu tr·ªã", expanded=False):
        if HERNIATED_DISC_TREATMENT:
            treatment = HERNIATED_DISC_TREATMENT
            
            if "conservative" in treatment:
                st.markdown("### 1Ô∏è‚É£ ƒêi·ªÅu tr·ªã b·∫£o t·ªìn (90% tr∆∞·ªùng h·ª£p):")
                conservative = treatment["conservative"]
                st.success(f"**T·ª∑ l·ªá th√†nh c√¥ng:** {conservative.get('success_rate', '')}")
                
                if "methods" in conservative:
                    for method in conservative["methods"]:
                        if isinstance(method, dict):
                            st.markdown(f"**{method.get('method', '')}**")
                            st.caption(f"Th·ªùi gian: {method.get('duration', '')}")
                            st.markdown(f"üí° {method.get('note', '')}")
                            st.divider()
            
            if "prevention" in treatment:
                st.markdown("### üõ°Ô∏è Ph√≤ng ng·ª´a:")
                for tip in treatment["prevention"]:
                    st.markdown(f"- {tip}")

