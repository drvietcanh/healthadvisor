"""
Arthritis Tab Components
Hi·ªÉn th·ªã tho√°i h√≥a kh·ªõp v√† vi√™m kh·ªõp d·∫°ng th·∫•p
"""

import streamlit as st
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

try:
    from diseases.bone_joint.arthritis import (
        OSTEOARTHRITIS_INFO,
        OSTEOARTHRITIS_SYMPTOMS,
        OSTEOARTHRITIS_TREATMENT,
        OSTEOARTHRITIS_MANAGEMENT
    )
    from diseases.bone_joint.arthritis import (
        RHEUMATOID_ARTHRITIS_INFO,
        RHEUMATOID_ARTHRITIS_SYMPTOMS,
        RHEUMATOID_ARTHRITIS_TREATMENT,
        RHEUMATOID_ARTHRITIS_MEDICATIONS
    )
    from diseases.bone_joint.arthritis import (
        JOINT_EXERCISES,
        JOINT_NUTRITION,
        JOINT_PROTECTION
    )
except ImportError:
    st.error("Kh√¥ng th·ªÉ t·∫£i module kh·ªõp. Vui l√≤ng ki·ªÉm tra l·∫°i.")
    st.stop()


def render_osteoarthritis_tab():
    """Tab Tho√°i h√≥a kh·ªõp"""
    st.header("ü¶¥ Tho√°i H√≥a Kh·ªõp (Osteoarthritis)")
    
    # Th√¥ng tin c∆° b·∫£n
    with st.expander("üìñ Tho√°i h√≥a kh·ªõp l√† g√¨?", expanded=True):
        if OSTEOARTHRITIS_INFO:
            st.markdown(OSTEOARTHRITIS_INFO.get("simple_explanation", ""))
            
            # Kh·ªõp th∆∞·ªùng b·ªã
            if "common_joints" in OSTEOARTHRITIS_INFO:
                st.markdown("### üîç Kh·ªõp th∆∞·ªùng b·ªã:")
                joints = OSTEOARTHRITIS_INFO["common_joints"]
                for joint_key, joint_info in joints.items():
                    if isinstance(joint_info, dict):
                        st.markdown(f"#### {joint_info.get('name', joint_key)}")
                        st.markdown(f"**T·∫ßn su·∫•t:** {joint_info.get('frequency', '')}")
                        if joint_info.get('why'):
                            st.caption(f"**T·∫°i sao:** {joint_info['why']}")
                        if joint_info.get('symptoms'):
                            st.markdown("**Tri·ªáu ch·ª©ng:**")
                            for symptom in joint_info['symptoms']:
                                st.markdown(f"- {symptom}")
                        st.divider()
    
    # Tri·ªáu ch·ª©ng
    with st.expander("üîç Tri·ªáu ch·ª©ng", expanded=False):
        if OSTEOARTHRITIS_SYMPTOMS:
            symptoms = OSTEOARTHRITIS_SYMPTOMS
            
            st.markdown("### Giai ƒëo·∫°n s·ªõm:")
            if "early_stage" in symptoms:
                for symptom in symptoms["early_stage"]:
                    st.markdown(f"- {symptom}")
            
            st.divider()
            
            st.markdown("### Giai ƒëo·∫°n n·∫∑ng:")
            if "advanced_stage" in symptoms:
                for symptom in symptoms["advanced_stage"]:
                    st.markdown(f"- {symptom}")
            
            if "red_flags" in symptoms:
                st.warning("**‚ö†Ô∏è D·∫•u hi·ªáu c·∫ßn ƒëi kh√°m ngay:**")
                for flag in symptoms["red_flags"]:
                    st.markdown(f"- {flag}")
    
    # ƒêi·ªÅu tr·ªã
    with st.expander("üíä ƒêi·ªÅu tr·ªã", expanded=False):
        if OSTEOARTHRITIS_TREATMENT:
            treatment = OSTEOARTHRITIS_TREATMENT
            
            # Kh√¥ng d√πng thu·ªëc
            if "non_drug" in treatment:
                non_drug = treatment["non_drug"]
                st.markdown(f"### {non_drug.get('title', '')}")
                if "methods" in non_drug:
                    for method in non_drug["methods"]:
                        if isinstance(method, dict):
                            st.markdown(f"**{method.get('method', '')}**")
                            if method.get('explanation'):
                                st.caption(f"üí° {method['explanation']}")
                            if method.get('types'):
                                st.markdown("Lo·∫°i b√†i t·∫≠p:")
                                for ex_type in method['types']:
                                    st.markdown(f"- {ex_type}")
                            if method.get('how'):
                                st.markdown(f"C√°ch l√†m: {method['how']}")
                            st.divider()
            
            # Thu·ªëc
            if "medications" in treatment:
                meds = treatment["medications"]
                st.markdown(f"### {meds.get('title', '')}")
                
                # Thu·ªëc b√¥i
                if "topical" in meds:
                    topical = meds["topical"]
                    st.markdown(f"#### {topical.get('type', '')}")
                    if topical.get('examples'):
                        st.markdown("**V√≠ d·ª•:** " + ", ".join(topical['examples']))
                    st.markdown(f"**C√°ch d√πng:** {topical.get('how', '')}")
                    st.info(topical.get('note', ''))
                
                # Thu·ªëc u·ªëng
                if "oral" in meds:
                    oral = meds["oral"]
                    st.markdown("#### Thu·ªëc u·ªëng:")
                    if "mild" in oral:
                        st.markdown(f"- **{oral['mild'].get('drug', '')}:** {oral['mild'].get('dose', '')}")
                        st.caption(f"üí° {oral['mild'].get('note', '')}")
                    if "moderate" in oral:
                        st.markdown(f"- **{oral['moderate'].get('drug', '')}:** {oral['moderate'].get('dose', '')}")
                        st.warning(oral['moderate'].get('note', ''))
                
                # Ti√™m kh·ªõp
                if "injections" in meds:
                    st.markdown("#### Ti√™m kh·ªõp:")
                    injections = meds["injections"]
                    if "corticosteroid" in injections:
                        cort = injections["corticosteroid"]
                        st.markdown(f"- **{cort.get('what', '')}:** {cort.get('duration', '')}")
                        st.caption(cort.get('note', ''))
                    if "hyaluronic_acid" in injections:
                        ha = injections["hyaluronic_acid"]
                        st.markdown(f"- **{ha.get('what', '')}:** {ha.get('duration', '')}")
                        st.caption(f"üí∞ {ha.get('note', '')}")
    
    # Qu·∫£n l√Ω
    with st.expander("üìã Qu·∫£n l√Ω h√†ng ng√†y", expanded=False):
        if OSTEOARTHRITIS_MANAGEMENT:
            mgmt = OSTEOARTHRITIS_MANAGEMENT
            
            if "daily_tips" in mgmt:
                st.markdown("### M·∫πo h√†ng ng√†y:")
                for tip in mgmt["daily_tips"]:
                    st.markdown(f"- {tip}")
            
            if "exercises" in mgmt:
                st.markdown("### B√†i t·∫≠p:")
                exercises = mgmt["exercises"]
                for joint, ex_list in exercises.items():
                    st.markdown(f"#### {joint.upper()}:")
                    for ex in ex_list:
                        st.markdown(f"- {ex}")
            
            if "nutrition" in mgmt:
                nutrition = mgmt["nutrition"]
                st.markdown("### Dinh d∆∞·ª°ng:")
                if "good_foods" in nutrition:
                    st.markdown("**‚úÖ N√™n ƒÉn:**")
                    for food in nutrition["good_foods"]:
                        st.markdown(f"- {food}")
                if "avoid_foods" in nutrition:
                    st.markdown("**‚ùå Tr√°nh:**")
                    for food in nutrition["avoid_foods"]:
                        st.markdown(f"- {food}")


def render_rheumatoid_arthritis_tab():
    """Tab Vi√™m kh·ªõp d·∫°ng th·∫•p"""
    st.header("üî¥ Vi√™m Kh·ªõp D·∫°ng Th·∫•p (Rheumatoid Arthritis)")
    
    # Th√¥ng tin c∆° b·∫£n
    with st.expander("üìñ Vi√™m kh·ªõp d·∫°ng th·∫•p l√† g√¨?", expanded=True):
        if RHEUMATOID_ARTHRITIS_INFO:
            st.markdown(RHEUMATOID_ARTHRITIS_INFO.get("simple_explanation", ""))
            
            # Ph√¢n bi·ªát v·ªõi tho√°i h√≥a
            if "key_differences" in RHEUMATOID_ARTHRITIS_INFO:
                st.markdown("### üîç Ph√¢n bi·ªát v·ªõi tho√°i h√≥a kh·ªõp:")
                diff = RHEUMATOID_ARTHRITIS_INFO["key_differences"]
                st.info(f"**Tho√°i h√≥a:** {diff.get('osteoarthritis', '')}")
                st.error(f"**Vi√™m d·∫°ng th·∫•p:** {diff.get('rheumatoid', '')}")
    
    # Tri·ªáu ch·ª©ng
    with st.expander("üîç Tri·ªáu ch·ª©ng", expanded=False):
        if RHEUMATOID_ARTHRITIS_SYMPTOMS:
            symptoms = RHEUMATOID_ARTHRITIS_SYMPTOMS
            
            st.markdown("### Tri·ªáu ch·ª©ng s·ªõm:")
            if "early_symptoms" in symptoms:
                for symptom in symptoms["early_symptoms"]:
                    st.markdown(f"- {symptom}")
            
            st.divider()
            
            st.markdown("### Tri·ªáu ch·ª©ng n·∫∑ng:")
            if "advanced_symptoms" in symptoms:
                for symptom in symptoms["advanced_symptoms"]:
                    st.markdown(f"- {symptom}")
            
            if "red_flags" in symptoms:
                st.error("**üö® D·∫•u hi·ªáu c·∫ßn ƒëi kh√°m ngay:**")
                for flag in symptoms["red_flags"]:
                    st.markdown(f"- {flag}")
    
    # ƒêi·ªÅu tr·ªã
    with st.expander("üíä ƒêi·ªÅu tr·ªã", expanded=False):
        if RHEUMATOID_ARTHRITIS_TREATMENT:
            treatment = RHEUMATOID_ARTHRITIS_TREATMENT
            
            st.warning(treatment.get("importance", ""))
            
            if "medications" in treatment:
                meds = treatment["medications"]
                
                # DMARDs
                if "dmards" in meds:
                    dmards = meds["dmards"]
                    st.markdown(f"### {dmards.get('title', '')}")
                    st.markdown(f"**C∆° ch·∫ø:** {dmards.get('explanation', '')}")
                    
                    if "examples" in dmards:
                        st.markdown("**C√°c thu·ªëc:**")
                        for drug in dmards["examples"]:
                            if isinstance(drug, dict):
                                st.markdown(f"#### {drug.get('drug', '')}")
                                st.markdown(f"**Li·ªÅu:** {drug.get('dose', '')}")
                                st.caption(drug.get('note', ''))
                                st.divider()
                    
                    st.info(f"**Quan tr·ªçng:** {dmards.get('duration', '')}")
                
                # Thu·ªëc sinh h·ªçc
                if "biologicals" in meds:
                    bio = meds["biologicals"]
                    st.markdown(f"### {bio.get('title', '')}")
                    st.markdown(f"**C∆° ch·∫ø:** {bio.get('explanation', '')}")
                    if "examples" in bio:
                        for example in bio["examples"]:
                            st.markdown(f"- {example}")
                    st.warning(f"**üí∞ Gi√°:** {bio.get('cost', '')}")
                    st.caption(f"**Khi n√†o d√πng:** {bio.get('when', '')}")
                    st.info(bio.get('note', ''))
    
    # Thu·ªëc v√† theo d√µi
    with st.expander("üìä Ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã", expanded=False):
        if RHEUMATOID_ARTHRITIS_MEDICATIONS:
            meds_info = RHEUMATOID_ARTHRITIS_MEDICATIONS
            
            if "dmard_regimens" in meds_info:
                regimens = meds_info["dmard_regimens"]
                
                if "first_line" in regimens:
                    st.markdown("### 1Ô∏è‚É£ ƒêi·ªÅu tr·ªã ƒë·∫ßu ti√™n:")
                    fl = regimens["first_line"]
                    st.markdown(f"**Thu·ªëc:** {fl.get('drug', '')}")
                    st.markdown(f"**Li·ªÅu:** {fl.get('dose', '')}")
                    st.markdown(f"**Th·ªùi gian:** {fl.get('duration', '')}")
                    st.caption(f"üí° {fl.get('if_fail', '')}")
                
                if "combination" in regimens:
                    st.markdown("### 2Ô∏è‚É£ Ph·ªëi h·ª£p thu·ªëc:")
                    combo = regimens["combination"]
                    st.markdown(f"**V√≠ d·ª•:** {combo.get('example', '')}")
                    st.caption(combo.get('note', ''))
            
            if "monitoring" in meds_info:
                st.markdown("### üìä Theo d√µi:")
                for item in meds_info["monitoring"]:
                    st.markdown(f"- {item}")
            
            if "important_notes" in meds_info:
                st.markdown("### ‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:")
                for note in meds_info["important_notes"]:
                    st.markdown(f"- {note}")

