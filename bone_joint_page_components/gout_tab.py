"""
Gout Tab Component
Hi·ªÉn th·ªã b·ªánh G√∫t
"""

import streamlit as st
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

try:
    from diseases.bone_joint.gout import (
        GOUT_INFO,
        GOUT_SYMPTOMS,
        GOUT_CAUSES,
        GOUT_DIET,
        GOUT_TREATMENT,
        GOUT_MEDICATIONS,
        GOUT_PREVENTION
    )
except ImportError:
    st.error("Kh√¥ng th·ªÉ t·∫£i module G√∫t. Vui l√≤ng ki·ªÉm tra l·∫°i.")
    st.stop()


def render_gout_tab():
    """Tab B·ªánh G√∫t"""
    st.header("ü¶∂ B·ªánh G√∫t (Gout)")
    
    # Th√¥ng tin c∆° b·∫£n
    with st.expander("üìñ B·ªánh G√∫t l√† g√¨?", expanded=True):
        if GOUT_INFO:
            st.markdown(GOUT_INFO.get("simple_explanation", ""))
            
            # TƒÉng acid uric ch∆∞a ph·∫£i g√∫t
            if "hyperuricemia" in GOUT_INFO:
                hyper = GOUT_INFO["hyperuricemia"]
                st.markdown("---")
                st.markdown(f"### {hyper.get('title', '')}")
                st.markdown(hyper.get("explanation", ""))
                
                if "when_to_treat" in hyper:
                    when = hyper["when_to_treat"]
                    
                    # Kh√¥ng c·∫ßn thu·ªëc
                    if "no_medication" in when:
                        no_med = when["no_medication"]
                        st.success(f"**{no_med.get('title', '')}**")
                        st.markdown("**Khi n√†o:**")
                        for condition in no_med.get('conditions', []):
                            st.markdown(f"- {condition}")
                        st.markdown("**L√†m g√¨:**")
                        for action in no_med.get('actions', []):
                            st.markdown(f"- {action}")
                    
                    st.divider()
                    
                    # C√¢n nh·∫Øc thu·ªëc
                    if "consider_medication" in when:
                        consider = when["consider_medication"]
                        st.warning(f"**{consider.get('title', '')}**")
                        st.markdown("**Khi n√†o:**")
                        for condition in consider.get('conditions', []):
                            st.markdown(f"- {condition}")
                        st.info(consider.get('note', ''))
    
    # Tri·ªáu ch·ª©ng
    with st.expander("üîç Tri·ªáu ch·ª©ng", expanded=False):
        if GOUT_SYMPTOMS:
            symptoms = GOUT_SYMPTOMS
            
            st.markdown("### C∆°n G√∫t C·∫•p:")
            if "acute_attack" in symptoms:
                attack = symptoms["acute_attack"]
                st.markdown("**ƒê·∫∑c ƒëi·ªÉm:**")
                for char in attack.get("characteristics", []):
                    st.markdown(f"- {char}")
                
                if "timeline" in attack:
                    st.markdown("**Di·ªÖn bi·∫øn:**")
                    for stage in attack["timeline"]:
                        st.markdown(f"- {stage}")
            
            if "red_flags" in symptoms:
                st.error("**üö® D·∫•u hi·ªáu c·∫ßn ƒëi kh√°m ngay:**")
                for flag in symptoms["red_flags"]:
                    st.markdown(f"- {flag}")
    
    # Nguy√™n nh√¢n
    with st.expander("üîç Nguy√™n nh√¢n", expanded=False):
        if GOUT_CAUSES:
            st.markdown(GOUT_CAUSES.get("mechanism", ""))
            
            if "risk_factors" in GOUT_CAUSES:
                factors = GOUT_CAUSES["risk_factors"]
                if "diet" in factors:
                    diet = factors["diet"]
                    st.markdown(f"### {diet.get('title', '')}")
                    if "high_purine" in diet:
                        st.markdown("**Th·ª©c ƒÉn nhi·ªÅu purine:**")
                        for food in diet["high_purine"]:
                            st.markdown(f"- {food}")
                    if "alcohol" in diet:
                        st.markdown("**R∆∞·ª£u bia:**")
                        for item in diet["alcohol"]:
                            st.markdown(f"- {item}")
    
    # Ch·∫ø ƒë·ªô ƒÉn
    with st.expander("üçΩÔ∏è Ch·∫ø ƒë·ªô ƒÉn", expanded=False):
        if GOUT_DIET:
            diet = GOUT_DIET
            
            if "avoid" in diet:
                st.error("**‚ùå TR√ÅNH:**")
                avoid = diet["avoid"]
                if "foods" in avoid:
                    for food_item in avoid["foods"]:
                        if isinstance(food_item, dict):
                            st.markdown(f"**{food_item.get('category', food_item.get('examples', ''))}**")
                            if food_item.get('examples'):
                                st.markdown(f"- {food_item['examples']}")
                            if food_item.get('purine_level'):
                                st.caption(f"M·ª©c purine: {food_item['purine_level']}")
                            st.warning(f"‚ö†Ô∏è {food_item.get('note', '')}")
                            st.divider()
            
            if "recommended" in diet:
                st.success("**‚úÖ N√äN ƒÇN:**")
                rec = diet["recommended"]
                if "foods" in rec:
                    for food_item in rec["foods"]:
                        if isinstance(food_item, dict):
                            st.markdown(f"**{food_item.get('food', '')}**")
                            if food_item.get('examples'):
                                st.markdown(f"- {food_item['examples']}")
                            st.caption(f"üí° {food_item.get('why', '')}")
                            if food_item.get('note'):
                                st.info(f"üìå {food_item['note']}")
                            st.divider()
            
            if "drinking" in diet:
                drinking = diet["drinking"]
                st.markdown("### üíß U·ªëng n∆∞·ªõc:")
                st.markdown(f"**T·∫ßm quan tr·ªçng:** {drinking.get('importance', '')}")
                st.markdown(f"**L∆∞·ª£ng:** {drinking.get('amount', '')}")
                st.markdown(f"**Lo·∫°i:** {drinking.get('what', '')}")
                st.warning(f"**Tr√°nh:** {drinking.get('avoid', '')}")
    
    # ƒêi·ªÅu tr·ªã
    with st.expander("üíä ƒêi·ªÅu tr·ªã", expanded=False):
        if GOUT_TREATMENT:
            treatment = GOUT_TREATMENT
            
            if "acute_attack" in treatment:
                st.markdown("### 1Ô∏è‚É£ ƒêi·ªÅu tr·ªã c∆°n g√∫t c·∫•p:")
                acute = treatment["acute_attack"]
                st.markdown(f"**M·ª•c ti√™u:** {acute.get('goal', '')}")
                
                if "medications" in acute:
                    for med in acute["medications"]:
                        if isinstance(med, dict):
                            st.markdown(f"#### {med.get('drug', '')}")
                            st.markdown(f"**Li·ªÅu:** {med.get('dose', '')}")
                            st.caption(f"üí° {med.get('when', '')}")
                            st.info(med.get('note', ''))
                            st.divider()
            
            if "long_term" in treatment:
                st.markdown("### 2Ô∏è‚É£ ƒêi·ªÅu tr·ªã l√¢u d√†i (NgƒÉn t√°i ph√°t):")
                long_term = treatment["long_term"]
                st.markdown(f"**M·ª•c ti√™u:** {long_term.get('goal', '')}")
                
                st.markdown("**Khi n√†o b·∫Øt ƒë·∫ßu:**")
                if "when_start" in long_term:
                    for when in long_term["when_start"]:
                        st.markdown(f"- {when}")
                
                if "medications" in long_term:
                    meds = long_term["medications"]
                    for med_key, med_info in meds.items():
                        if isinstance(med_info, dict):
                            st.markdown(f"#### {med_info.get('drug', med_key)}")
                            st.markdown(f"**Li·ªÅu:** {med_info.get('dose', '')}")
                            st.caption(f"**C∆° ch·∫ø:** {med_info.get('mechanism', '')}")
                            st.info(med_info.get('note', ''))
                            st.divider()
                
                if "important" in long_term:
                    st.warning(long_term["important"])
    
    # Ph√≤ng ng·ª´a
    with st.expander("üõ°Ô∏è Ph√≤ng ng·ª´a", expanded=False):
        if GOUT_PREVENTION:
            prevention = GOUT_PREVENTION
            
            if "lifestyle" in prevention:
                st.markdown("### Thay ƒë·ªïi l·ªëi s·ªëng:")
                for item in prevention["lifestyle"]:
                    st.markdown(f"- {item}")
            
            if "medication_adherence" in prevention:
                st.markdown("### D√πng thu·ªëc ƒë·ªÅu ƒë·∫∑n:")
                for item in prevention["medication_adherence"]:
                    st.markdown(f"- {item}")
            
            if "warning" in prevention:
                st.error(prevention["warning"])

