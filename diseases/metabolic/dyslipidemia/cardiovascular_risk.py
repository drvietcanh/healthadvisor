"""
ƒê√°nh gi√° Nguy c∆° Tim M·∫°ch
Cardiovascular Risk Assessment
"""

from typing import Dict


def calculate_framingham_score(
    age: int,
    gender: str,
    cholesterol: float,
    hdl: float,
    systolic_bp: float,
    on_bp_medication: bool = False,
    smoker: bool = False,
    diabetes: bool = False
) -> Dict:
    """
    T√≠nh Framingham Risk Score (nguy c∆° tim m·∫°ch 10 nƒÉm)
    
    Args:
        age: Tu·ªïi (30-74)
        gender: "male" ho·∫∑c "female"
        cholesterol: TC (mg/dL)
        hdl: HDL-C (mg/dL)
        systolic_bp: Huy·∫øt √°p t√¢m thu (mmHg)
        on_bp_medication: ƒêang d√πng thu·ªëc huy·∫øt √°p?
        smoker: H√∫t thu·ªëc?
        diabetes: C√≥ ti·ªÉu ƒë∆∞·ªùng?
    
    Returns:
        Dict v·ªõi risk score v√† category
    """
    # Simplified Framingham Score (ATP III)
    points = 0
    
    # Age points
    if gender == "male":
        if age < 35:
            points += -1
        elif age < 40:
            points += 0
        elif age < 45:
            points += 1
        elif age < 50:
            points += 2
        elif age < 55:
            points += 3
        elif age < 60:
            points += 4
        elif age < 65:
            points += 5
        elif age < 70:
            points += 6
        else:
            points += 7
    else:  # female
        if age < 35:
            points += -9
        elif age < 40:
            points += -4
        elif age < 45:
            points += 0
        elif age < 50:
            points += 3
        elif age < 55:
            points += 6
        elif age < 60:
            points += 7
        elif age < 65:
            points += 8
        else:
            points += 8
    
    # Total Cholesterol points
    if gender == "male":
        if cholesterol < 160:
            points += -3
        elif cholesterol < 200:
            points += 0
        elif cholesterol < 240:
            points += 1
        elif cholesterol < 280:
            points += 2
        else:
            points += 3
    else:
        if cholesterol < 160:
            points += -2
        elif cholesterol < 200:
            points += 0
        elif cholesterol < 240:
            points += 1
        elif cholesterol < 280:
            points += 1
        else:
            points += 3
    
    # HDL points
    if hdl < 35:
        points += 2
    elif hdl < 45:
        points += 1
    elif hdl < 50:
        points += 0
    elif hdl < 60:
        points += 0
    else:
        points += -1
    
    # Blood Pressure points
    if on_bp_medication:
        if systolic_bp < 120:
            points += 0
        elif systolic_bp < 130:
            points += 2
        elif systolic_bp < 140:
            points += 3
        elif systolic_bp < 160:
            points += 4
        else:
            points += 5
    else:
        if systolic_bp < 120:
            points += 0
        elif systolic_bp < 130:
            points += 0
        elif systolic_bp < 140:
            points += 1
        elif systolic_bp < 160:
            points += 2
        else:
            points += 3
    
    # Smoking
    if smoker:
        points += 2
    
    # Diabetes
    if diabetes:
        points += 2
    
    # Convert points to risk percentage
    # Simplified conversion
    if gender == "male":
        risk_map = {
            -3: 1, -2: 1, -1: 2, 0: 2, 1: 3, 2: 4, 3: 5,
            4: 7, 5: 8, 6: 10, 7: 13, 8: 16, 9: 20, 10: 25,
            11: 31, 12: 37, 13: 45
        }
    else:
        risk_map = {
            -2: 1, -1: 2, 0: 2, 1: 2, 2: 3, 3: 3, 4: 4,
            5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 11, 11: 13,
            12: 15, 13: 17, 14: 20, 15: 24
        }
    
    risk_percentage = risk_map.get(points, 50 if points > 13 else 1)
    
    # Categorize risk
    if risk_percentage < 10:
        category = "Th·∫•p"
        color = "#4CAF50"
        icon = "‚úÖ"
        action = "Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh"
    elif risk_percentage < 20:
        category = "Trung b√¨nh"
        color = "#FF9800"
        icon = "‚ö†Ô∏è"
        action = "C·∫ßn thay ƒë·ªïi l·ªëi s·ªëng, c√≥ th·ªÉ c·∫ßn thu·ªëc"
    else:
        category = "Cao"
        color = "#F44336"
        icon = "üö®"
        action = "C·∫¶N ƒêI·ªÄU TR·ªä T√çCH C·ª∞C! D√πng thu·ªëc + l·ªëi s·ªëng"
    
    return {
        "points": points,
        "risk_percentage": risk_percentage,
        "category": category,
        "color": color,
        "icon": icon,
        "action": action,
        "note": f"Nguy c∆° m·∫Øc b·ªánh tim m·∫°ch trong 10 nƒÉm t·ªõi: {risk_percentage}%"
    }


def calculate_cardiovascular_risk(
    ldl: float,
    hdl: float,
    age: int,
    gender: str,
    has_diabetes: bool = False,
    has_hypertension: bool = False,
    smoker: bool = False,
    has_cvd: bool = False
) -> Dict:
    """
    ƒê√°nh gi√° t·ªïng h·ª£p nguy c∆° tim m·∫°ch
    
    Returns:
        Dict v·ªõi risk level v√† recommendations
    """
    risk_factors = []
    risk_points = 0
    
    # LDL cao
    if ldl >= 190:
        risk_factors.append("LDL r·∫•t cao (‚â•190)")
        risk_points += 3
    elif ldl >= 160:
        risk_factors.append("LDL cao (160-189)")
        risk_points += 2
    elif ldl >= 130:
        risk_factors.append("LDL cao bi√™n (130-159)")
        risk_points += 1
    
    # HDL th·∫•p
    threshold = 40 if gender == "male" else 50
    if hdl < threshold:
        risk_factors.append(f"HDL th·∫•p (<{threshold})")
        risk_points += 1
    
    # Tu·ªïi
    if age >= 65:
        risk_factors.append("Tu·ªïi cao (‚â•65)")
        risk_points += 1
    elif age >= 55:
        risk_factors.append("Tu·ªïi trung ni√™n (55-64)")
        risk_points += 0.5
    
    # C√°c y·∫øu t·ªë kh√°c
    if has_diabetes:
        risk_factors.append("Ti·ªÉu ƒë∆∞·ªùng")
        risk_points += 2
    
    if has_hypertension:
        risk_factors.append("Cao huy·∫øt √°p")
        risk_points += 1
    
    if smoker:
        risk_factors.append("H√∫t thu·ªëc")
        risk_points += 1
    
    if has_cvd:
        risk_factors.append("ƒê√£ c√≥ b·ªánh tim m·∫°ch")
        risk_points += 3
    
    # Classify risk
    if has_cvd or ldl >= 190 or risk_points >= 5:
        risk_level = "R·∫•t cao"
        ldl_target = "<55"
        color = "#F44336"
        icon = "üö®"
    elif has_diabetes or risk_points >= 3:
        risk_level = "Cao"
        ldl_target = "<70"
        color = "#FF5722"
        icon = "‚ùå"
    elif risk_points >= 2:
        risk_level = "Trung b√¨nh"
        ldl_target = "<100"
        color = "#FF9800"
        icon = "‚ö†Ô∏è"
    else:
        risk_level = "Th·∫•p"
        ldl_target = "<116"
        color = "#4CAF50"
        icon = "‚úÖ"
    
    return {
        "risk_level": risk_level,
        "risk_factors": risk_factors,
        "risk_factors_count": len(risk_factors),
        "ldl_target": ldl_target,
        "color": color,
        "icon": icon,
        "current_ldl": ldl,
        "ldl_reduction_needed": max(0, ldl - int(ldl_target.replace("<", ""))),
    }


def get_risk_category(risk_level: str) -> Dict:
    """L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ category nguy c∆°"""
    categories = {
        "Th·∫•p": {
            "description": "Nguy c∆° tim m·∫°ch th·∫•p",
            "ldl_target": "<116 mg/dL",
            "treatment": "Thay ƒë·ªïi l·ªëi s·ªëng",
            "follow_up": "X√©t nghi·ªám 3-5 nƒÉm/l·∫ßn"
        },
        "Trung b√¨nh": {
            "description": "Nguy c∆° tim m·∫°ch trung b√¨nh",
            "ldl_target": "<100 mg/dL",
            "treatment": "L·ªëi s·ªëng + c√¢n nh·∫Øc thu·ªëc",
            "follow_up": "X√©t nghi·ªám 1 nƒÉm/l·∫ßn"
        },
        "Cao": {
            "description": "Nguy c∆° tim m·∫°ch cao",
            "ldl_target": "<70 mg/dL",
            "treatment": "L·ªëi s·ªëng + THU·ªêC STATIN",
            "follow_up": "X√©t nghi·ªám 3-6 th√°ng/l·∫ßn"
        },
        "R·∫•t cao": {
            "description": "Nguy c∆° tim m·∫°ch r·∫•t cao",
            "ldl_target": "<55 mg/dL",
            "treatment": "L·ªëi s·ªëng + THU·ªêC M·∫†NH + theo d√µi s√°t",
            "follow_up": "X√©t nghi·ªám 2-3 th√°ng/l·∫ßn"
        }
    }
    return categories.get(risk_level, categories["Trung b√¨nh"])


def get_treatment_recommendations(
    ldl: float,
    risk_level: str,
    current_ldl: float
) -> Dict:
    """
    ƒê·ªÅ xu·∫•t ƒëi·ªÅu tr·ªã
    
    Args:
        ldl: LDL hi·ªán t·∫°i
        risk_level: M·ª©c ƒë·ªô nguy c∆°
        current_ldl: LDL hi·ªán t·∫°i (duplicate for compatibility)
    
    Returns:
        Dict v·ªõi recommendations
    """
    category_info = get_risk_category(risk_level)
    target_ldl = int(category_info["ldl_target"].replace("<", "").replace("mg/dL", "").strip())
    
    reduction_needed = current_ldl - target_ldl
    reduction_pct = (reduction_needed / current_ldl * 100) if current_ldl > 0 else 0
    
    recommendations = {
        "lifestyle": [
            "ü•ó Gi·∫£m ch·∫•t b√©o b√£o h√≤a (<7% calories)",
            "üö´ Tr√°nh trans fat ho√†n to√†n",
            "üêü ƒÇn c√° b√©o 2-3 l·∫ßn/tu·∫ßn",
            "ü•¨ TƒÉng rau xanh, ng≈© c·ªëc nguy√™n h·∫°t",
            "üèÉ V·∫≠n ƒë·ªông 150 ph√∫t/tu·∫ßn",
            "‚öñÔ∏è Gi·∫£m c√¢n n·∫øu th·ª´a c√¢n"
        ],
        "medication": [],
        "monitoring": []
    }
    
    # Medication recommendations based on risk
    if risk_level == "R·∫•t cao":
        recommendations["medication"] = [
            "üíä STATIN li·ªÅu cao (Atorvastatin 40-80mg ho·∫∑c Rosuvastatin 20-40mg)",
            "üíä C√≥ th·ªÉ th√™m Ezetimibe 10mg n·∫øu ch∆∞a ƒë·∫°t m·ª•c ti√™u",
            "üíä C√¢n nh·∫Øc PCSK9 inhibitor n·∫øu LDL v·∫´n >55 sau d√πng thu·ªëc t·ªëi ƒëa"
        ]
        recommendations["monitoring"] = [
            "üìä X√©t nghi·ªám lipid 2-3 th√°ng/l·∫ßn",
            "ü©∫ Kh√°m tim m·∫°ch 3-6 th√°ng/l·∫ßn",
            "üß™ Ki·ªÉm tra men gan sau 1-2 th√°ng d√πng statin"
        ]
    
    elif risk_level == "Cao":
        recommendations["medication"] = [
            "üíä STATIN li·ªÅu trung b√¨nh-cao (Atorvastatin 20-40mg)",
            "üíä TƒÉng li·ªÅu ho·∫∑c th√™m Ezetimibe n·∫øu ch∆∞a ƒë·∫°t m·ª•c ti√™u"
        ]
        recommendations["monitoring"] = [
            "üìä X√©t nghi·ªám lipid 3-6 th√°ng/l·∫ßn",
            "ü©∫ Kh√°m tim m·∫°ch 6 th√°ng/l·∫ßn"
        ]
    
    elif risk_level == "Trung b√¨nh":
        if reduction_pct > 30:
            recommendations["medication"] = [
                "üíä C√¢n nh·∫Øc STATIN li·ªÅu th·∫•p-trung b√¨nh",
                "‚è∞ Th·ª≠ l·ªëi s·ªëng 3-6 th√°ng tr∆∞·ªõc khi d√πng thu·ªëc"
            ]
        else:
            recommendations["medication"] = [
                "‚è∞ Th·ª≠ thay ƒë·ªïi l·ªëi s·ªëng 3-6 th√°ng tr∆∞·ªõc",
                "üíä D√πng statin n·∫øu LDL v·∫´n kh√¥ng ƒë·∫°t m·ª•c ti√™u"
            ]
        recommendations["monitoring"] = [
            "üìä X√©t nghi·ªám lipid 3-6 th√°ng sau thay ƒë·ªïi l·ªëi s·ªëng",
            "ü©∫ Kh√°m tim m·∫°ch 1 nƒÉm/l·∫ßn"
        ]
    
    else:  # Th·∫•p
        recommendations["medication"] = [
            "‚úÖ KH√îNG C·∫¶N THU·ªêC - ch·ªâ duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh"
        ]
        recommendations["monitoring"] = [
            "üìä X√©t nghi·ªám lipid 3-5 nƒÉm/l·∫ßn",
            "ü©∫ Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ h√†ng nƒÉm"
        ]
    
    return {
        "current_ldl": current_ldl,
        "target_ldl": target_ldl,
        "reduction_needed": round(reduction_needed, 1),
        "reduction_percentage": round(reduction_pct, 1),
        "risk_level": risk_level,
        "recommendations": recommendations,
        "note": f"C·∫ßn gi·∫£m LDL {reduction_needed:.0f} mg/dL ({reduction_pct:.0f}%)" if reduction_needed > 0 else "LDL ƒë√£ ƒë·∫°t m·ª•c ti√™u!"
    }


