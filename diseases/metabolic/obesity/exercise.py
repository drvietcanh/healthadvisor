"""
Exercise & Physical Activity - V·∫≠n ƒë·ªông & ƒê·ªët ch√°y Calories
===========================================================

T√≠nh calories ƒë·ªët ch√°y, k·∫ø ho·∫°ch t·∫≠p luy·ªán cho ng∆∞·ªùi Vi·ªát
"""

from typing import Dict, List

# Calories ƒë·ªët ch√°y theo ho·∫°t ƒë·ªông (cal/gi·ªù cho ng∆∞·ªùi 70kg)
# S·∫Ω ƒëi·ªÅu ch·ªânh theo c√¢n n·∫∑ng th·ª±c t·∫ø
EXERCISES_CALORIES = {
    "daily_activities": {
        "name": "üè† Ho·∫°t ƒë·ªông H√†ng ng√†y",
        "activities": {
            "Ng·ªìi, xem TV": 60,
            "ƒê·ª©ng, n·∫•u ƒÉn": 100,
            "L√†m vi·ªác nh√† nh·∫π": 150,
            "Lau nh√†, qu√©t nh√†": 200,
            "Gi·∫∑t qu·∫ßn √°o tay": 180,
            "L√†m v∆∞·ªùn, t∆∞·ªõi c√¢y": 250,
            "Mua s·∫Øm ƒëi b·ªô": 180,
        }
    },
    
    "walking": {
        "name": "üö∂ ƒêi B·ªô",
        "activities": {
            "ƒêi b·ªô ch·∫≠m (3 km/h)": 150,
            "ƒêi b·ªô v·ª´a (4 km/h)": 200,
            "ƒêi b·ªô nhanh (5 km/h)": 250,
            "ƒêi b·ªô r·∫•t nhanh (6 km/h)": 320,
            "Leo c·∫ßu thang": 400,
        }
    },
    
    "cardio": {
        "name": "üèÉ Cardio",
        "activities": {
            "Ch·∫°y b·ªô ch·∫≠m (6 km/h)": 350,
            "Ch·∫°y b·ªô v·ª´a (8 km/h)": 450,
            "Ch·∫°y b·ªô nhanh (10 km/h)": 600,
            "ƒê·∫°p xe ch·∫≠m": 250,
            "ƒê·∫°p xe v·ª´a": 350,
            "ƒê·∫°p xe nhanh": 500,
            "B∆°i l·ªôi": 400,
            "Nh·∫£y d√¢y": 600,
        }
    },
    
    "sports": {
        "name": "‚öΩ Th·ªÉ Thao",
        "activities": {
            "C·∫ßu l√¥ng": 350,
            "Tennis": 400,
            "B√≥ng ƒë√°": 450,
            "B√≥ng chuy·ªÅn": 300,
            "B√≥ng r·ªï": 400,
            "B√≥ng b√†n": 250,
        }
    },
    
    "gym": {
        "name": "üí™ Ph√≤ng Gym",
        "activities": {
            "T·∫≠p t·∫° nh·∫π": 200,
            "T·∫≠p t·∫° n·∫∑ng": 350,
            "M√°y ch·∫°y b·ªô": 400,
            "Xe ƒë·∫°p t·∫°i ch·ªó": 300,
            "Aerobic": 350,
            "Zumba": 400,
        }
    },
    
    "gentle": {
        "name": "üßò Nh·∫π Nh√†ng (Cho ng∆∞·ªùi gi√†)",
        "activities": {
            "Yoga": 180,
            "Th√°i c·ª±c quy·ªÅn": 200,
            "Khi√™u v≈© ch·∫≠m": 200,
            "D·∫°o ch∆°i c√¥ng vi√™n": 150,
            "V·∫≠n ƒë·ªông nh·∫π t·∫°i nh√†": 120,
        }
    }
}

# M·ª©c ƒë·ªô v·∫≠n ƒë·ªông
EXERCISE_LEVELS = {
    "beginner": {
        "name": "Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu / Ng∆∞·ªùi gi√†",
        "icon": "üê¢",
        "duration": "15-30 ph√∫t/ng√†y",
        "frequency": "3-4 ng√†y/tu·∫ßn",
        "intensity": "Nh·∫π nh√†ng",
        "recommendations": [
            "ƒêi b·ªô ch·∫≠m 15-20 ph√∫t",
            "Yoga, th√°i c·ª±c",
            "L√†m v∆∞·ªùn",
            "V·∫≠n ƒë·ªông t·∫°i nh√†",
        ],
        "notes": [
            "B·∫Øt ƒë·∫ßu t·ª´ nh·∫π, tƒÉng d·∫ßn",
            "Kh√¥ng c·ªë g·∫Øng qu√° s·ª©c",
            "Ngh·ªâ ng∆°i khi m·ªát",
            "Tham kh·∫£o b√°c sƒ© n·∫øu c√≥ b·ªánh n·ªÅn"
        ]
    },
    
    "intermediate": {
        "name": "Trung b√¨nh",
        "icon": "üö∂",
        "duration": "30-45 ph√∫t/ng√†y",
        "frequency": "4-5 ng√†y/tu·∫ßn",
        "intensity": "V·ª´a ph·∫£i",
        "recommendations": [
            "ƒêi b·ªô nhanh 30 ph√∫t",
            "ƒê·∫°p xe 30 ph√∫t",
            "B∆°i l·ªôi 30 ph√∫t",
            "T·∫≠p gym nh·∫π",
        ],
        "notes": [
            "T·∫≠p ƒë·ªÅu ƒë·∫∑n m·ªói tu·∫ßn",
            "K·∫øt h·ª£p cardio + t·∫° nh·∫π",
            "TƒÉng c∆∞·ªùng d·∫ßn"
        ]
    },
    
    "advanced": {
        "name": "N√¢ng cao",
        "icon": "üèÉ",
        "duration": "45-60 ph√∫t/ng√†y",
        "frequency": "5-6 ng√†y/tu·∫ßn",
        "intensity": "Cao",
        "recommendations": [
            "Ch·∫°y b·ªô 30-45 ph√∫t",
            "HIIT 20-30 ph√∫t",
            "T·∫≠p t·∫° n·∫∑ng",
            "Th·ªÉ thao ƒë·ªëi kh√°ng"
        ],
        "notes": [
            "T·∫≠p chuy√™n nghi·ªáp",
            "C√≥ ng∆∞·ªùi h∆∞·ªõng d·∫´n",
            "Ch·∫ø ƒë·ªô dinh d∆∞·ª°ng ph√π h·ª£p"
        ]
    }
}


def calculate_calories_burned(
    activity: str,
    duration_minutes: int,
    weight_kg: float = 70
) -> Dict:
    """
    T√≠nh calories ƒë·ªët ch√°y
    
    Args:
        activity: T√™n ho·∫°t ƒë·ªông
        duration_minutes: Th·ªùi gian (ph√∫t)
        weight_kg: C√¢n n·∫∑ng (kg) - m·∫∑c ƒë·ªãnh 70kg
    
    Returns:
        Dict v·ªõi calories burned v√† th√¥ng tin
    """
    # T√¨m activity trong database
    base_calories_per_hour = None
    category_name = None
    
    for category_id, category_data in EXERCISES_CALORIES.items():
        if activity in category_data["activities"]:
            base_calories_per_hour = category_data["activities"][activity]
            category_name = category_data["name"]
            break
    
    if base_calories_per_hour is None:
        return {"error": f"Kh√¥ng t√¨m th·∫•y ho·∫°t ƒë·ªông: {activity}"}
    
    # ƒêi·ªÅu ch·ªânh theo c√¢n n·∫∑ng (base = 70kg)
    # Calories t·ª∑ l·ªá thu·∫≠n v·ªõi c√¢n n·∫∑ng
    weight_multiplier = weight_kg / 70
    adjusted_calories_per_hour = base_calories_per_hour * weight_multiplier
    
    # T√≠nh theo th·ªùi gian
    calories_burned = (adjusted_calories_per_hour / 60) * duration_minutes
    
    # T∆∞∆°ng ƒë∆∞∆°ng m√≥n ƒÉn
    food_equivalents = get_food_equivalents(calories_burned)
    
    return {
        "activity": activity,
        "category": category_name,
        "duration_minutes": duration_minutes,
        "weight_kg": weight_kg,
        "calories_burned": round(calories_burned, 0),
        "base_rate": base_calories_per_hour,
        "adjusted_rate": round(adjusted_calories_per_hour, 0),
        "food_equivalents": food_equivalents,
        "note": f"Ng∆∞·ªùi {weight_kg}kg {activity} {duration_minutes} ph√∫t"
    }


def get_food_equivalents(calories: float) -> List[str]:
    """T∆∞∆°ng ƒë∆∞∆°ng v·ªõi m√≥n ƒÉn Vi·ªát Nam"""
    equivalents = []
    
    foods = [
        (400, "1 b√°t ph·ªü"),
        (350, "1 b√°nh m√¨ th·ªãt"),
        (200, "1 b√°t c∆°m"),
        (150, "1 ly c√† ph√™ s·ªØa"),
        (100, "1 h·ªôp s·ªØa chua"),
        (70, "1 qu·∫£ tr·ª©ng lu·ªôc"),
    ]
    
    for cal, food in foods:
        if calories >= cal * 0.9:  # Allow 10% tolerance
            portions = calories / cal
            if portions >= 1:
                equivalents.append(f"{portions:.1f} {food}")
    
    return equivalents[:3]  # Top 3


def get_exercise_plan(
    level: str,
    goal: str = "lose_weight",
    available_time: int = 30
) -> Dict:
    """
    T·∫°o k·∫ø ho·∫°ch t·∫≠p luy·ªán
    
    Args:
        level: "beginner", "intermediate", "advanced"
        goal: "lose_weight", "maintain", "build_muscle"
        available_time: Th·ªùi gian c√≥ (ph√∫t/ng√†y)
    
    Returns:
        Dict v·ªõi weekly plan
    """
    level_info = EXERCISE_LEVELS.get(level, EXERCISE_LEVELS["beginner"])
    
    if goal == "lose_weight":
        # Focus cardio
        weekly_plan = {
            "monday": {
                "activity": "ƒêi b·ªô nhanh",
                "duration": min(available_time, 30),
                "type": "cardio",
                "note": "Kh·ªüi ƒë·ªông tu·∫ßn m·ªõi"
            },
            "tuesday": {
                "activity": "L√†m v∆∞·ªùn ho·∫∑c vi·ªác nh√†",
                "duration": 30,
                "type": "daily",
                "note": "Ho·∫°t ƒë·ªông nh·∫π"
            },
            "wednesday": {
                "activity": "Yoga ho·∫∑c Th√°i c·ª±c",
                "duration": min(available_time, 30),
                "type": "gentle",
                "note": "Th∆∞ gi√£n, d·∫ªo dai"
            },
            "thursday": {
                "activity": "ƒê·∫°p xe ho·∫∑c B∆°i",
                "duration": min(available_time, 40),
                "type": "cardio",
                "note": "ƒê·ªët m·ª° hi·ªáu qu·∫£"
            },
            "friday": {
                "activity": "ƒêi b·ªô + Leo c·∫ßu thang",
                "duration": 30,
                "type": "cardio",
                "note": "K·∫øt h·ª£p nhi·ªÅu ƒë·ªông t√°c"
            },
            "saturday": {
                "activity": "Th·ªÉ thao (c·∫ßu l√¥ng, b√≥ng b√†n...)",
                "duration": 45,
                "type": "sports",
                "note": "Vui v·∫ª, giao l∆∞u"
            },
            "sunday": {
                "activity": "Ngh·ªâ ng∆°i ho·∫∑c ƒëi d·∫°o nh·∫π",
                "duration": 20,
                "type": "rest",
                "note": "Ph·ª•c h·ªìi c∆° th·ªÉ"
            }
        }
    
    elif goal == "maintain":
        weekly_plan = {
            "monday": {"activity": "ƒêi b·ªô", "duration": 30, "type": "cardio"},
            "wednesday": {"activity": "Yoga", "duration": 30, "type": "gentle"},
            "friday": {"activity": "Th·ªÉ thao", "duration": 30, "type": "sports"},
            "sunday": {"activity": "ƒêi d·∫°o", "duration": 30, "type": "gentle"}
        }
    
    else:  # build_muscle
        weekly_plan = {
            "monday": {"activity": "T·∫≠p t·∫°", "duration": 45, "type": "gym"},
            "tuesday": {"activity": "Cardio nh·∫π", "duration": 20, "type": "cardio"},
            "wednesday": {"activity": "T·∫≠p t·∫°", "duration": 45, "type": "gym"},
            "thursday": {"activity": "Ngh·ªâ", "duration": 0, "type": "rest"},
            "friday": {"activity": "T·∫≠p t·∫°", "duration": 45, "type": "gym"},
            "saturday": {"activity": "Cardio", "duration": 30, "type": "cardio"},
            "sunday": {"activity": "Ngh·ªâ", "duration": 0, "type": "rest"}
        }
    
    # T√≠nh t·ªïng
    total_minutes = sum(day["duration"] for day in weekly_plan.values())
    estimated_calories = total_minutes * 5  # Rough estimate ~5 cal/min
    
    return {
        "level": level_info["name"],
        "goal": goal,
        "weekly_plan": weekly_plan,
        "total_minutes_per_week": total_minutes,
        "estimated_calories_burned": round(estimated_calories, 0),
        "tips": level_info["notes"]
    }


def get_safe_exercise_tips() -> List[Dict]:
    """L·ªùi khuy√™n t·∫≠p luy·ªán an to√†n cho ng∆∞·ªùi Vi·ªát"""
    return [
        {
            "title": "üåÖ T·∫≠p bu·ªïi s√°ng ho·∫∑c chi·ªÅu m√°t",
            "detail": "Tr√°nh t·∫≠p l√∫c tr∆∞a n·∫Øng n√≥ng (11h-15h)",
            "reason": "Ph√≤ng say n·∫Øng, m·∫•t n∆∞·ªõc"
        },
        {
            "title": "üíß U·ªëng ƒë·ªß n∆∞·ªõc",
            "detail": "U·ªëng 250ml tr∆∞·ªõc, trong v√† sau t·∫≠p",
            "reason": "Ph√≤ng m·∫•t n∆∞·ªõc, chu·ªôt r√∫t"
        },
        {
            "title": "üèÉ Kh·ªüi ƒë·ªông 5-10 ph√∫t",
            "detail": "Gi√£n c∆°, kh·ªüi ƒë·ªông nh·∫π tr∆∞·ªõc khi t·∫≠p ch√≠nh",
            "reason": "Tr√°nh ch·∫•n th∆∞∆°ng c∆°, kh·ªõp"
        },
        {
            "title": "üëü Mang gi√†y th·ªÉ thao ph√π h·ª£p",
            "detail": "Gi√†y √™m, ch·ªëng tr∆°n, v·ª´a v·∫∑n",
            "reason": "B·∫£o v·ªá kh·ªõp g·ªëi, m·∫Øt c√° ch√¢n"
        },
        {
            "title": "ü©∫ Ki·ªÉm tra s·ª©c kh·ªèe tr∆∞·ªõc khi t·∫≠p",
            "detail": "Ng∆∞·ªùi >50 tu·ªïi ho·∫∑c c√≥ b·ªánh n·ªÅn n√™n kh√°m b√°c sƒ©",
            "reason": "ƒê·∫£m b·∫£o an to√†n, tr√°nh bi·∫øn ch·ª©ng"
        },
        {
            "title": "üìà TƒÉng c∆∞·ªùng ƒë·ªô t·ª´ t·ª´",
            "detail": "TƒÉng 10-15% m·ªói tu·∫ßn",
            "reason": "C∆° th·ªÉ c·∫ßn th·ªùi gian th√≠ch nghi"
        },
        {
            "title": "üõå Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß",
            "detail": "√çt nh·∫•t 1-2 ng√†y ngh·ªâ/tu·∫ßn",
            "reason": "C∆° b·∫Øp c·∫ßn th·ªùi gian ph·ª•c h·ªìi"
        },
        {
            "title": "üö® D·ª´ng ngay n·∫øu c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng",
            "detail": "ƒêau ng·ª±c, ch√≥ng m·∫∑t, kh√≥ th·ªü, ƒëau kh·ªõp",
            "reason": "An to√†n l√† tr√™n h·∫øt"
        }
    ]


def get_exercise_by_location() -> Dict:
    """B√†i t·∫≠p theo ƒë·ªãa ƒëi·ªÉm - ph√π h·ª£p Vi·ªát Nam"""
    return {
        "at_home": {
            "name": "üè† T·∫°i nh√† (kh√¥ng c·∫ßn d·ª•ng c·ª•)",
            "exercises": [
                {"name": "Ch·ªëng ƒë·∫©y", "reps": "10-15 l·∫ßn x 3 hi·ªáp", "calories": 100},
                {"name": "G·∫≠p b·ª•ng", "reps": "15-20 l·∫ßn x 3 hi·ªáp", "calories": 80},
                {"name": "Squat", "reps": "15-20 l·∫ßn x 3 hi·ªáp", "calories": 120},
                {"name": "Plank", "reps": "30-60 gi√¢y x 3 hi·ªáp", "calories": 100},
                {"name": "Nh·∫£y t·∫°i ch·ªó", "reps": "1 ph√∫t x 5 l·∫ßn", "calories": 150},
            ],
            "total_time": "20-30 ph√∫t",
            "total_calories": "~250 cal"
        },
        
        "park": {
            "name": "üå≥ C√¥ng vi√™n",
            "exercises": [
                {"name": "ƒêi b·ªô nhanh", "duration": "20 ph√∫t", "calories": 100},
                {"name": "Ch·∫°y b·ªô nh·∫π", "duration": "15 ph√∫t", "calories": 150},
                {"name": "Th√°i c·ª±c quy·ªÅn", "duration": "20 ph√∫t", "calories": 120},
                {"name": "Khi√™u v≈©", "duration": "20 ph√∫t", "calories": 130},
            ],
            "note": "H√≠t th·ªü kh√¥ng kh√≠ trong l√†nh, g·∫∑p g·ª° b·∫°n b√®"
        },
        
        "stairs": {
            "name": "ü™ú C·∫ßu thang (t·∫°i nh√†/chung c∆∞)",
            "exercises": [
                {"name": "Leo l√™n xu·ªëng c·∫ßu thang", "duration": "10 ph√∫t", "calories": 150},
                {"name": "B∆∞·ªõc l√™n xu·ªëng b·∫≠c thang", "reps": "50 l·∫ßn", "calories": 80},
            ],
            "note": "ƒê·ªët ch√°y calories nhanh, t·ªët cho tim m·∫°ch"
        },
        
        "gym": {
            "name": "üí™ Ph√≤ng gym / CLB th·ªÉ thao",
            "exercises": [
                {"name": "M√°y ch·∫°y b·ªô", "duration": "20 ph√∫t", "calories": 200},
                {"name": "Xe ƒë·∫°p", "duration": "20 ph√∫t", "calories": 150},
                {"name": "T·∫° nh·∫π", "duration": "20 ph√∫t", "calories": 120},
                {"name": "Aerobic/Zumba", "duration": "30 ph√∫t", "calories": 250},
            ],
            "note": "C√≥ HLV h∆∞·ªõng d·∫´n, thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß"
        }
    }

