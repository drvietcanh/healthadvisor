"""
Body Metrics - C√°c ch·ªâ s·ªë c∆° th·ªÉ (WHR, Body Fat %)
"""

from typing import Dict


def calculate_whr(waist_cm: float, hip_cm: float, gender: str) -> Dict:
    """
    T√≠nh WHR (Waist to Hip Ratio) - T·ª∑ l·ªá v√≤ng eo/h√¥ng
    ƒê√°nh gi√° ph√¢n b·ªë m·ª° v√† nguy c∆° tim m·∫°ch
    
    Args:
        waist_cm: V√≤ng eo (cm)
        hip_cm: V√≤ng h√¥ng (cm)
        gender: "male" ho·∫∑c "female"
    
    Returns:
        Dict v·ªõi WHR v√† risk assessment
    """
    if waist_cm <= 0 or hip_cm <= 0:
        raise ValueError("V√≤ng eo v√† v√≤ng h√¥ng ph·∫£i > 0")
    
    whr = waist_cm / hip_cm
    
    # Risk thresholds theo WHO
    if gender == "male":
        if whr < 0.90:
            risk = "Th·∫•p"
            color = "#66BB6A"
            icon = "‚úÖ"
        elif whr < 0.95:
            risk = "Trung b√¨nh"
            color = "#FFEB3B"
            icon = "‚ö†Ô∏è"
        else:
            risk = "Cao"
            color = "#F44336"
            icon = "üö®"
    else:  # female
        if whr < 0.80:
            risk = "Th·∫•p"
            color = "#66BB6A"
            icon = "‚úÖ"
        elif whr < 0.85:
            risk = "Trung b√¨nh"
            color = "#FFEB3B"
            icon = "‚ö†Ô∏è"
        else:
            risk = "Cao"
            color = "#F44336"
            icon = "üö®"
    
    return {
        "whr": round(whr, 2),
        "risk": risk,
        "color": color,
        "icon": icon,
        "threshold": "Nam: <0.90, N·ªØ: <0.80 (Th·∫•p)",
        "note": "WHR cao ‚Üí M·ª° b·ª•ng nhi·ªÅu ‚Üí Nguy c∆° tim m·∫°ch cao"
    }


def calculate_body_fat_percentage(
    bmi: float,
    age: int,
    gender: str
) -> Dict:
    """
    ∆Ø·ªõc t√≠nh % m·ª° c∆° th·ªÉ d·ª±a tr√™n BMI v√† tu·ªïi
    (C√¥ng th·ª©c Deurenberg)
    
    Args:
        bmi: BMI value
        age: Tu·ªïi
        gender: "male" ho·∫∑c "female"
    
    Returns:
        Dict v·ªõi body fat % v√† category
    """
    # C√¥ng th·ª©c Deurenberg
    # Adult: (1.20 x BMI) + (0.23 x Age) - (10.8 x gender) - 5.4
    # gender: male=1, female=0
    
    gender_value = 1 if gender == "male" else 0
    body_fat = (1.20 * bmi) + (0.23 * age) - (10.8 * gender_value) - 5.4
    body_fat = max(0, body_fat)  # Kh√¥ng √¢m
    
    # Ph√¢n lo·∫°i theo American Council on Exercise (ACE)
    if gender == "male":
        categories = {
            "essential": (2, 5, "Thi·∫øt y·∫øu (v·∫≠n ƒë·ªông vi√™n)", "#4DA6FF"),
            "athletes": (6, 13, "V·∫≠n ƒë·ªông vi√™n", "#66BB6A"),
            "fitness": (14, 17, "Kh·ªèe m·∫°nh", "#66BB6A"),
            "average": (18, 24, "Trung b√¨nh", "#FFEB3B"),
            "obese": (25, 100, "B√©o ph√¨", "#F44336")
        }
    else:  # female
        categories = {
            "essential": (10, 13, "Thi·∫øt y·∫øu (v·∫≠n ƒë·ªông vi√™n)", "#4DA6FF"),
            "athletes": (14, 20, "V·∫≠n ƒë·ªông vi√™n", "#66BB6A"),
            "fitness": (21, 24, "Kh·ªèe m·∫°nh", "#66BB6A"),
            "average": (25, 31, "Trung b√¨nh", "#FFEB3B"),
            "obese": (32, 100, "B√©o ph√¨", "#F44336")
        }
    
    category_name = "Unknown"
    category_color = "#999999"
    
    for cat_id, (min_pct, max_pct, label, color) in categories.items():
        if min_pct <= body_fat <= max_pct:
            category_name = label
            category_color = color
            break
    
    return {
        "body_fat_percentage": round(body_fat, 1),
        "category": category_name,
        "color": category_color,
        "gender": gender,
        "note": "ƒê√¢y l√† ∆∞·ªõc t√≠nh, c·∫ßn DEXA scan ƒë·ªÉ ch√≠nh x√°c"
    }


__all__ = ['calculate_whr', 'calculate_body_fat_percentage']
