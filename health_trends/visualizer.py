"""
Visualizer - V·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng ƒë·∫πp m·∫Øt
"""
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
from datetime import datetime, timedelta

def create_trend_chart(df, metric, title, yaxis_title, reference_lines=None):
    """
    T·∫°o bi·ªÉu ƒë·ªì xu h∆∞·ªõng v·ªõi ƒë∆∞·ªùng tham chi·∫øu
    
    Args:
        df: DataFrame v·ªõi c·ªôt 'Ng√†y' v√† metric
        metric: T√™n c·ªôt c·∫ßn v·∫Ω
        title: Ti√™u ƒë·ªÅ bi·ªÉu ƒë·ªì
        yaxis_title: Label tr·ª•c Y
        reference_lines: Dict c√°c ƒë∆∞·ªùng tham chi·∫øu {'B√¨nh th∆∞·ªùng': 120, ...}
    
    Returns:
        Plotly figure
    """
    fig = go.Figure()
    
    # ƒê∆∞·ªùng xu h∆∞·ªõng ch√≠nh
    fig.add_trace(go.Scatter(
        x=df['Ng√†y'],
        y=df[metric],
        mode='lines+markers',
        name='Th·ª±c t·∫ø',
        line=dict(color='#4CAF50', width=3),
        marker=dict(size=8, symbol='circle'),
        hovertemplate='<b>%{x|%d/%m/%Y}</b><br>' + yaxis_title + ': %{y}<extra></extra>'
    ))
    
    # ƒê∆∞·ªùng trung b√¨nh
    if len(df) > 1:
        mean_value = df[metric].mean()
        fig.add_trace(go.Scatter(
            x=df['Ng√†y'],
            y=[mean_value] * len(df),
            mode='lines',
            name='Trung b√¨nh',
            line=dict(color='#FF9800', width=2, dash='dash'),
            hovertemplate=f'Trung b√¨nh: {mean_value:.1f}<extra></extra>'
        ))
    
    # C√°c ƒë∆∞·ªùng tham chi·∫øu
    if reference_lines:
        colors = {
            'normal': '#2196F3',
            'warning': '#FF9800',
            'danger': '#F44336'
        }
        
        for label, (value, color_type) in reference_lines.items():
            fig.add_trace(go.Scatter(
                x=df['Ng√†y'],
                y=[value] * len(df),
                mode='lines',
                name=label,
                line=dict(color=colors.get(color_type, '#999'), width=1, dash='dot'),
                hovertemplate=f'{label}: {value}<extra></extra>'
            ))
    
    # Layout
    fig.update_layout(
        title=dict(
            text=title,
            font=dict(size=24, family='Arial', color='#333')
        ),
        xaxis=dict(
            title='Ng√†y',
            showgrid=True,
            gridcolor='#eee',
            titlefont=dict(size=16)
        ),
        yaxis=dict(
            title=yaxis_title,
            showgrid=True,
            gridcolor='#eee',
            titlefont=dict(size=16)
        ),
        hovermode='x unified',
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(size=14),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1,
            font=dict(size=12)
        ),
        height=450
    )
    
    return fig

def create_comparison_chart(current_data, previous_data, metric, title):
    """
    T·∫°o bi·ªÉu ƒë·ªì so s√°nh th√°ng n√†y vs th√°ng tr∆∞·ªõc
    
    Args:
        current_data: DataFrame th√°ng hi·ªán t·∫°i
        previous_data: DataFrame th√°ng tr∆∞·ªõc
        metric: Metric c·∫ßn so s√°nh
        title: Ti√™u ƒë·ªÅ
    
    Returns:
        Plotly figure
    """
    fig = go.Figure()
    
    # Th√°ng tr∆∞·ªõc
    if previous_data is not None and len(previous_data) > 0:
        fig.add_trace(go.Scatter(
            x=list(range(1, len(previous_data) + 1)),
            y=previous_data[metric],
            mode='lines',
            name='Th√°ng tr∆∞·ªõc',
            line=dict(color='#999', width=2, dash='dash'),
            opacity=0.6
        ))
    
    # Th√°ng n√†y
    if current_data is not None and len(current_data) > 0:
        fig.add_trace(go.Scatter(
            x=list(range(1, len(current_data) + 1)),
            y=current_data[metric],
            mode='lines+markers',
            name='Th√°ng n√†y',
            line=dict(color='#4CAF50', width=3),
            marker=dict(size=6)
        ))
    
    fig.update_layout(
        title=title,
        xaxis=dict(title='Ng√†y trong th√°ng'),
        yaxis=dict(title=metric),
        hovermode='x unified',
        plot_bgcolor='white',
        height=400,
        font=dict(size=14)
    )
    
    return fig

def create_correlation_chart(df):
    """
    T·∫°o bi·ªÉu ƒë·ªì t∆∞∆°ng quan gi·ªØa c√°c ch·ªâ s·ªë
    (VD: C√¢n n·∫∑ng vs Huy·∫øt √°p)
    
    Args:
        df: DataFrame v·ªõi nhi·ªÅu metrics
    
    Returns:
        Plotly figure
    """
    # Ki·ªÉm tra c·ªôt c√≥ s·∫µn
    if 'C√¢n n·∫∑ng (kg)' not in df.columns or 'Huy·∫øt √°p t√¢m thu' not in df.columns:
        return None
    
    # L·ªçc d·ªØ li·ªáu h·ª£p l·ªá
    df_clean = df[['C√¢n n·∫∑ng (kg)', 'Huy·∫øt √°p t√¢m thu']].dropna()
    
    if len(df_clean) < 3:
        return None
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=df_clean['C√¢n n·∫∑ng (kg)'],
        y=df_clean['Huy·∫øt √°p t√¢m thu'],
        mode='markers',
        marker=dict(
            size=10,
            color=df_clean['Huy·∫øt √°p t√¢m thu'],
            colorscale='RdYlGn_r',
            showscale=True,
            colorbar=dict(title="Huy·∫øt √°p")
        ),
        text=[f"BP: {bp:.0f}" for bp in df_clean['Huy·∫øt √°p t√¢m thu']],
        hovertemplate='C√¢n n·∫∑ng: %{x} kg<br>Huy·∫øt √°p: %{y} mmHg<extra></extra>'
    ))
    
    fig.update_layout(
        title='M·ªëi li√™n h·ªá: C√¢n n·∫∑ng & Huy·∫øt √°p',
        xaxis=dict(title='C√¢n n·∫∑ng (kg)'),
        yaxis=dict(title='Huy·∫øt √°p t√¢m thu (mmHg)'),
        plot_bgcolor='white',
        height=400,
        font=dict(size=14)
    )
    
    return fig


def create_weight_trend_chart(df):
    """
    Bi·ªÉu ƒë·ªì xu h∆∞·ªõng c√¢n n·∫∑ng
    
    Args:
        df: DataFrame v·ªõi c·ªôt 'Ng√†y' v√† 'C√¢n n·∫∑ng (kg)'
    
    Returns:
        Plotly figure
    """
    # L·ªçc d·ªØ li·ªáu c√≥ c√¢n n·∫∑ng
    df_weight = df[df['C√¢n n·∫∑ng (kg)'].notna()].copy()
    
    if len(df_weight) == 0:
        return None
    
    fig = go.Figure()
    
    # ƒê∆∞·ªùng c√¢n n·∫∑ng
    fig.add_trace(go.Scatter(
        x=df_weight['Ng√†y'],
        y=df_weight['C√¢n n·∫∑ng (kg)'],
        mode='lines+markers',
        name='C√¢n n·∫∑ng',
        line=dict(color='#9C27B0', width=3),
        marker=dict(size=10, symbol='circle'),
        fill='tozeroy',
        fillcolor='rgba(156, 39, 176, 0.1)',
        hovertemplate='<b>%{x|%d/%m/%Y}</b><br>C√¢n n·∫∑ng: %{y:.1f} kg<extra></extra>'
    ))
    
    # ƒê∆∞·ªùng trung b√¨nh
    mean_weight = df_weight['C√¢n n·∫∑ng (kg)'].mean()
    fig.add_trace(go.Scatter(
        x=df_weight['Ng√†y'],
        y=[mean_weight] * len(df_weight),
        mode='lines',
        name=f'TB: {mean_weight:.1f} kg',
        line=dict(color='#FF9800', width=2, dash='dash'),
        hovertemplate=f'Trung b√¨nh: {mean_weight:.1f} kg<extra></extra>'
    ))
    
    # Layout
    fig.update_layout(
        title=dict(
            text='üìä Xu H∆∞·ªõng C√¢n N·∫∑ng',
            font=dict(size=24, color='#333')
        ),
        xaxis=dict(title='Ng√†y', showgrid=True, gridcolor='#eee'),
        yaxis=dict(title='C√¢n n·∫∑ng (kg)', showgrid=True, gridcolor='#eee'),
        hovermode='x unified',
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(size=14),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        height=450
    )
    
    return fig


def create_calories_balance_chart(df):
    """
    Bi·ªÉu ƒë·ªì c√¢n b·∫±ng calories (ƒÉn v√†o vs ƒë·ªët ch√°y)
    
    Args:
        df: DataFrame v·ªõi 'Ng√†y', 'Calories ƒÉn v√†o', 'Calories ƒë·ªët ch√°y'
    
    Returns:
        Plotly figure
    """
    # L·ªçc d·ªØ li·ªáu c√≥ calories
    df_cal = df[(df['Calories ƒÉn v√†o'].notna()) | (df['Calories ƒë·ªët ch√°y'].notna())].copy()
    
    if len(df_cal) == 0:
        return None
    
    # Fill NaN with 0
    df_cal['Calories ƒÉn v√†o'] = df_cal['Calories ƒÉn v√†o'].fillna(0)
    df_cal['Calories ƒë·ªët ch√°y'] = df_cal['Calories ƒë·ªët ch√°y'].fillna(0)
    df_cal['C√¢n b·∫±ng'] = df_cal['Calories ƒÉn v√†o'] - df_cal['Calories ƒë·ªët ch√°y']
    
    fig = go.Figure()
    
    # Calories ƒÉn v√†o
    fig.add_trace(go.Bar(
        x=df_cal['Ng√†y'],
        y=df_cal['Calories ƒÉn v√†o'],
        name='ƒÇn v√†o',
        marker_color='#FF5722',
        hovertemplate='<b>%{x|%d/%m/%Y}</b><br>ƒÇn v√†o: %{y} cal<extra></extra>'
    ))
    
    # Calories ƒë·ªët ch√°y
    fig.add_trace(go.Bar(
        x=df_cal['Ng√†y'],
        y=df_cal['Calories ƒë·ªët ch√°y'],
        name='ƒê·ªët ch√°y',
        marker_color='#4CAF50',
        hovertemplate='<b>%{x|%d/%m/%Y}</b><br>ƒê·ªët ch√°y: %{y} cal<extra></extra>'
    ))
    
    # C√¢n b·∫±ng (line)
    fig.add_trace(go.Scatter(
        x=df_cal['Ng√†y'],
        y=df_cal['C√¢n b·∫±ng'],
        name='C√¢n b·∫±ng',
        mode='lines+markers',
        line=dict(color='#2196F3', width=3),
        marker=dict(size=8),
        yaxis='y2',
        hovertemplate='<b>%{x|%d/%m/%Y}</b><br>C√¢n b·∫±ng: %{y:+} cal<extra></extra>'
    ))
    
    # Layout
    fig.update_layout(
        title=dict(
            text='üçΩÔ∏è C√¢n B·∫±ng Calories',
            font=dict(size=24, color='#333')
        ),
        xaxis=dict(title='Ng√†y', showgrid=True, gridcolor='#eee'),
        yaxis=dict(
            title='Calories',
            showgrid=True,
            gridcolor='#eee',
            side='left'
        ),
        yaxis2=dict(
            title='C√¢n b·∫±ng (cal)',
            overlaying='y',
            side='right',
            showgrid=False
        ),
        barmode='group',
        hovermode='x unified',
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(size=14),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        height=450
    )
    
    return fig


def create_waist_circumference_chart(df):
    """
    Bi·ªÉu ƒë·ªì v√≤ng eo (ƒë·ªÉ ƒë√°nh gi√° b√©o ph√¨)
    
    Args:
        df: DataFrame v·ªõi 'Ng√†y' v√† 'V√≤ng eo (cm)'
    
    Returns:
        Plotly figure
    """
    # L·ªçc d·ªØ li·ªáu c√≥ v√≤ng eo
    df_waist = df[df['V√≤ng eo (cm)'].notna()].copy()
    
    if len(df_waist) == 0:
        return None
    
    fig = go.Figure()
    
    # ƒê∆∞·ªùng v√≤ng eo
    fig.add_trace(go.Scatter(
        x=df_waist['Ng√†y'],
        y=df_waist['V√≤ng eo (cm)'],
        mode='lines+markers',
        name='V√≤ng eo',
        line=dict(color='#FF5722', width=3),
        marker=dict(size=10),
        hovertemplate='<b>%{x|%d/%m/%Y}</b><br>V√≤ng eo: %{y} cm<extra></extra>'
    ))
    
    # ƒê∆∞·ªùng c·∫£nh b√°o (Nam: 90cm, N·ªØ: 80cm)
    fig.add_trace(go.Scatter(
        x=df_waist['Ng√†y'],
        y=[90] * len(df_waist),
        mode='lines',
        name='Ng∆∞·ª°ng Nam (90cm)',
        line=dict(color='#2196F3', width=2, dash='dash'),
        hovertemplate='Ng∆∞·ª°ng Nam: 90 cm<extra></extra>'
    ))
    
    fig.add_trace(go.Scatter(
        x=df_waist['Ng√†y'],
        y=[80] * len(df_waist),
        mode='lines',
        name='Ng∆∞·ª°ng N·ªØ (80cm)',
        line=dict(color='#E91E63', width=2, dash='dash'),
        hovertemplate='Ng∆∞·ª°ng N·ªØ: 80 cm<extra></extra>'
    ))
    
    # Layout
    fig.update_layout(
        title=dict(
            text='üìè Xu H∆∞·ªõng V√≤ng Eo',
            font=dict(size=24, color='#333')
        ),
        xaxis=dict(title='Ng√†y', showgrid=True, gridcolor='#eee'),
        yaxis=dict(title='V√≤ng eo (cm)', showgrid=True, gridcolor='#eee'),
        hovermode='x unified',
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(size=14),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        height=450,
        annotations=[
            dict(
                text="‚ö†Ô∏è V√≤ng eo cao = B√©o b·ª•ng = Nguy c∆° tim m·∫°ch cao",
                xref="paper", yref="paper",
                x=0.5, y=-0.15,
                showarrow=False,
                font=dict(size=12, color='#666')
            )
        ]
    )
    
    return fig

