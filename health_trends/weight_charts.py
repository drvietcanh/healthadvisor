"""
Weight Charts - Bi·ªÉu ƒë·ªì c√¢n n·∫∑ng v√† v√≤ng eo
===========================================

Bi·ªÉu ƒë·ªì xu h∆∞·ªõng c√¢n n·∫∑ng v√† v√≤ng eo ƒë·ªÉ ƒë√°nh gi√° b√©o ph√¨
"""
import plotly.graph_objects as go
import pandas as pd


def create_weight_trend_chart(df):
    """
    Bi·ªÉu ƒë·ªì xu h∆∞·ªõng c√¢n n·∫∑ng
    
    Args:
        df: DataFrame v·ªõi c·ªôt 'Ng√†y' v√† 'C√¢n n·∫∑ng (kg)'
    
    Returns:
        Plotly figure
    """
    # L·ªçc d·ªØ li·ªáu c√≥ c√¢n n·∫∑ng
    df_weight = df[df['C√¢n n·∫∑ng (kg)'].notna()].copy()
    
    if len(df_weight) == 0:
        return None
    
    fig = go.Figure()
    
    # ƒê∆∞·ªùng c√¢n n·∫∑ng
    fig.add_trace(go.Scatter(
        x=df_weight['Ng√†y'],
        y=df_weight['C√¢n n·∫∑ng (kg)'],
        mode='lines+markers',
        name='C√¢n n·∫∑ng',
        line=dict(color='#9C27B0', width=3),
        marker=dict(size=10, symbol='circle'),
        fill='tozeroy',
        fillcolor='rgba(156, 39, 176, 0.1)',
        hovertemplate='<b>%{x|%d/%m/%Y}</b><br>C√¢n n·∫∑ng: %{y:.1f} kg<extra></extra>'
    ))
    
    # ƒê∆∞·ªùng trung b√¨nh
    mean_weight = df_weight['C√¢n n·∫∑ng (kg)'].mean()
    fig.add_trace(go.Scatter(
        x=df_weight['Ng√†y'],
        y=[mean_weight] * len(df_weight),
        mode='lines',
        name=f'TB: {mean_weight:.1f} kg',
        line=dict(color='#FF9800', width=2, dash='dash'),
        hovertemplate=f'Trung b√¨nh: {mean_weight:.1f} kg<extra></extra>'
    ))
    
    # Layout
    fig.update_layout(
        title=dict(
            text='üìä Xu H∆∞·ªõng C√¢n N·∫∑ng',
            font=dict(size=24, color='#333')
        ),
        xaxis=dict(title='Ng√†y', showgrid=True, gridcolor='#eee'),
        yaxis=dict(title='C√¢n n·∫∑ng (kg)', showgrid=True, gridcolor='#eee'),
        hovermode='x unified',
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(size=14),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        height=450
    )
    
    return fig


def create_waist_circumference_chart(df):
    """
    Bi·ªÉu ƒë·ªì v√≤ng eo (ƒë·ªÉ ƒë√°nh gi√° b√©o ph√¨)
    
    Args:
        df: DataFrame v·ªõi 'Ng√†y' v√† 'V√≤ng eo (cm)'
    
    Returns:
        Plotly figure
    """
    # L·ªçc d·ªØ li·ªáu c√≥ v√≤ng eo
    df_waist = df[df['V√≤ng eo (cm)'].notna()].copy()
    
    if len(df_waist) == 0:
        return None
    
    fig = go.Figure()
    
    # ƒê∆∞·ªùng v√≤ng eo
    fig.add_trace(go.Scatter(
        x=df_waist['Ng√†y'],
        y=df_waist['V√≤ng eo (cm)'],
        mode='lines+markers',
        name='V√≤ng eo',
        line=dict(color='#FF5722', width=3),
        marker=dict(size=10),
        hovertemplate='<b>%{x|%d/%m/%Y}</b><br>V√≤ng eo: %{y} cm<extra></extra>'
    ))
    
    # ƒê∆∞·ªùng c·∫£nh b√°o (Nam: 90cm, N·ªØ: 80cm)
    fig.add_trace(go.Scatter(
        x=df_waist['Ng√†y'],
        y=[90] * len(df_waist),
        mode='lines',
        name='Ng∆∞·ª°ng Nam (90cm)',
        line=dict(color='#2196F3', width=2, dash='dash'),
        hovertemplate='Ng∆∞·ª°ng Nam: 90 cm<extra></extra>'
    ))
    
    fig.add_trace(go.Scatter(
        x=df_waist['Ng√†y'],
        y=[80] * len(df_waist),
        mode='lines',
        name='Ng∆∞·ª°ng N·ªØ (80cm)',
        line=dict(color='#E91E63', width=2, dash='dash'),
        hovertemplate='Ng∆∞·ª°ng N·ªØ: 80 cm<extra></extra>'
    ))
    
    # Layout
    fig.update_layout(
        title=dict(
            text='üìè Xu H∆∞·ªõng V√≤ng Eo',
            font=dict(size=24, color='#333')
        ),
        xaxis=dict(title='Ng√†y', showgrid=True, gridcolor='#eee'),
        yaxis=dict(title='V√≤ng eo (cm)', showgrid=True, gridcolor='#eee'),
        hovermode='x unified',
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(size=14),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        height=450,
        annotations=[
            dict(
                text="‚ö†Ô∏è V√≤ng eo cao = B√©o b·ª•ng = Nguy c∆° tim m·∫°ch cao",
                xref="paper", yref="paper",
                x=0.5, y=-0.15,
                showarrow=False,
                font=dict(size=12, color='#666')
            )
        ]
    )
    
    return fig

